//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PMIU.WRMIS.Database
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    using PMIU.WRMIS.Model;
    
    public partial class WRMIS_Entities : DbContext
    {
        public WRMIS_Entities()
            : base("name=WRMIS_Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<CM_Complaint> CM_Complaint { get; set; }
        public virtual DbSet<CM_ComplaintAssignmentHistory> CM_ComplaintAssignmentHistory { get; set; }
        public virtual DbSet<CM_ComplaintMarked> CM_ComplaintMarked { get; set; }
        public virtual DbSet<CM_ComplaintNotification> CM_ComplaintNotification { get; set; }
        public virtual DbSet<CM_ComplaintSource> CM_ComplaintSource { get; set; }
        public virtual DbSet<CM_ComplaintStatus> CM_ComplaintStatus { get; set; }
        public virtual DbSet<CM_ComplaintType> CM_ComplaintType { get; set; }
        public virtual DbSet<CM_NotificationList> CM_NotificationList { get; set; }
        public virtual DbSet<CO_Attribute> CO_Attribute { get; set; }
        public virtual DbSet<CO_BarrageDailyDataDetail> CO_BarrageDailyDataDetail { get; set; }
        public virtual DbSet<CO_BarrageDailyDataDetailHistory> CO_BarrageDailyDataDetailHistory { get; set; }
        public virtual DbSet<CO_BarrageGaugeReadingFrequency> CO_BarrageGaugeReadingFrequency { get; set; }
        public virtual DbSet<CO_ChannelAdminBoundries> CO_ChannelAdminBoundries { get; set; }
        public virtual DbSet<CO_ChannelComndType> CO_ChannelComndType { get; set; }
        public virtual DbSet<CO_ChannelFlowType> CO_ChannelFlowType { get; set; }
        public virtual DbSet<CO_ChannelIndent> CO_ChannelIndent { get; set; }
        public virtual DbSet<CO_ChannelIndentOfftakes> CO_ChannelIndentOfftakes { get; set; }
        public virtual DbSet<CO_ChannelIrrigationBoundaries> CO_ChannelIrrigationBoundaries { get; set; }
        public virtual DbSet<CO_ChannelOutletsLocation> CO_ChannelOutletsLocation { get; set; }
        public virtual DbSet<CO_ChannelReach> CO_ChannelReach { get; set; }
        public virtual DbSet<CO_ChannelReachHistory> CO_ChannelReachHistory { get; set; }
        public virtual DbSet<CO_ChannelType> CO_ChannelType { get; set; }
        public virtual DbSet<CO_Circle> CO_Circle { get; set; }
        public virtual DbSet<CO_District> CO_District { get; set; }
        public virtual DbSet<CO_DistrictDivision> CO_DistrictDivision { get; set; }
        public virtual DbSet<CO_Division> CO_Division { get; set; }
        public virtual DbSet<CO_Domain> CO_Domain { get; set; }
        public virtual DbSet<CO_GaugeCategory> CO_GaugeCategory { get; set; }
        public virtual DbSet<CO_GaugeLag> CO_GaugeLag { get; set; }
        public virtual DbSet<CO_GaugeLevel> CO_GaugeLevel { get; set; }
        public virtual DbSet<CO_GaugeType> CO_GaugeType { get; set; }
        public virtual DbSet<CO_LiningType> CO_LiningType { get; set; }
        public virtual DbSet<CO_OutletType> CO_OutletType { get; set; }
        public virtual DbSet<CO_PoliceStation> CO_PoliceStation { get; set; }
        public virtual DbSet<CO_Province> CO_Province { get; set; }
        public virtual DbSet<CO_ReadingFrequency> CO_ReadingFrequency { get; set; }
        public virtual DbSet<CO_ReadingFrequencyTimeStamp> CO_ReadingFrequencyTimeStamp { get; set; }
        public virtual DbSet<CO_ReasonForChange> CO_ReasonForChange { get; set; }
        public virtual DbSet<CO_River> CO_River { get; set; }
        public virtual DbSet<CO_Section> CO_Section { get; set; }
        public virtual DbSet<CO_Station> CO_Station { get; set; }
        public virtual DbSet<CO_SubDivision> CO_SubDivision { get; set; }
        public virtual DbSet<CO_Tehsil> CO_Tehsil { get; set; }
        public virtual DbSet<CO_Village> CO_Village { get; set; }
        public virtual DbSet<CO_Zone> CO_Zone { get; set; }
        public virtual DbSet<IF_Irrigator> IF_Irrigator { get; set; }
        public virtual DbSet<IF_IrrigatorFeedback> IF_IrrigatorFeedback { get; set; }
        public virtual DbSet<SP_ForecastData> SP_ForecastData { get; set; }
        public virtual DbSet<SP_ForecastDraft> SP_ForecastDraft { get; set; }
        public virtual DbSet<SP_ForecastScenario> SP_ForecastScenario { get; set; }
        public virtual DbSet<SP_ProbabilityTable> SP_ProbabilityTable { get; set; }
        public virtual DbSet<SP_RefEastern> SP_RefEastern { get; set; }
        public virtual DbSet<SP_RefElevationCapacity> SP_RefElevationCapacity { get; set; }
        public virtual DbSet<SP_RefElevationCapacityHistory> SP_RefElevationCapacityHistory { get; set; }
        public virtual DbSet<SP_RefPercentile> SP_RefPercentile { get; set; }
        public virtual DbSet<SP_RefTDailyCalendar> SP_RefTDailyCalendar { get; set; }
        public virtual DbSet<SP_TDailyBarrageData> SP_TDailyBarrageData { get; set; }
        public virtual DbSet<SP_TDailyCanalData> SP_TDailyCanalData { get; set; }
        public virtual DbSet<SP_TDailyReservoirData> SP_TDailyReservoirData { get; set; }
        public virtual DbSet<SP_TDailyRiverData> SP_TDailyRiverData { get; set; }
        public virtual DbSet<UA_ActingRoles> UA_ActingRoles { get; set; }
        public virtual DbSet<UA_AlertNotification> UA_AlertNotification { get; set; }
        public virtual DbSet<UA_AndroidRoleRights> UA_AndroidRoleRights { get; set; }
        public virtual DbSet<UA_AndroidScreens> UA_AndroidScreens { get; set; }
        public virtual DbSet<UA_AssociatedLocation> UA_AssociatedLocation { get; set; }
        public virtual DbSet<UA_AssociatedStations> UA_AssociatedStations { get; set; }
        public virtual DbSet<UA_AssociatedStationsHistory> UA_AssociatedStationsHistory { get; set; }
        public virtual DbSet<UA_EmailNotification> UA_EmailNotification { get; set; }
        public virtual DbSet<UA_IrrigationLevel> UA_IrrigationLevel { get; set; }
        public virtual DbSet<UA_Modules> UA_Modules { get; set; }
        public virtual DbSet<UA_NotificationConfiguration> UA_NotificationConfiguration { get; set; }
        public virtual DbSet<UA_NotificationEvents> UA_NotificationEvents { get; set; }
        public virtual DbSet<UA_Organization> UA_Organization { get; set; }
        public virtual DbSet<UA_Pages> UA_Pages { get; set; }
        public virtual DbSet<UA_RoleRights> UA_RoleRights { get; set; }
        public virtual DbSet<UA_SMSNotification> UA_SMSNotification { get; set; }
        public virtual DbSet<UA_SystemParameters> UA_SystemParameters { get; set; }
        public virtual DbSet<UA_Tokens> UA_Tokens { get; set; }
        public virtual DbSet<UA_UserManager> UA_UserManager { get; set; }
        public virtual DbSet<UA_UserManagerClone> UA_UserManagerClone { get; set; }
        public virtual DbSet<UA_UserNotificationConfiguration> UA_UserNotificationConfiguration { get; set; }
        public virtual DbSet<UA_UsersHistory> UA_UsersHistory { get; set; }
        public virtual DbSet<WT_Abiana> WT_Abiana { get; set; }
        public virtual DbSet<WT_AreaType> WT_AreaType { get; set; }
        public virtual DbSet<WT_BreachAttachments> WT_BreachAttachments { get; set; }
        public virtual DbSet<WT_ChiefAppealDetails> WT_ChiefAppealDetails { get; set; }
        public virtual DbSet<WT_WaterTheftCanalWire> WT_WaterTheftCanalWire { get; set; }
        public virtual DbSet<WT_WaterTheftDecisionFineDetail> WT_WaterTheftDecisionFineDetail { get; set; }
        public virtual DbSet<WT_WaterTheftOffender> WT_WaterTheftOffender { get; set; }
        public virtual DbSet<WT_WaterTheftPoliceCase> WT_WaterTheftPoliceCase { get; set; }
        public virtual DbSet<WT_WaterTheftStatus> WT_WaterTheftStatus { get; set; }
        public virtual DbSet<CM_ComplaintComments> CM_ComplaintComments { get; set; }
        public virtual DbSet<CO_StructureType> CO_StructureType { get; set; }
        public virtual DbSet<FO_DrainOutfall> FO_DrainOutfall { get; set; }
        public virtual DbSet<FO_InfrastructureBreachingSection> FO_InfrastructureBreachingSection { get; set; }
        public virtual DbSet<FO_InfrastructureParent> FO_InfrastructureParent { get; set; }
        public virtual DbSet<FO_InfrastructureRepresentative> FO_InfrastructureRepresentative { get; set; }
        public virtual DbSet<FO_InfrastructureStoneStock> FO_InfrastructureStoneStock { get; set; }
        public virtual DbSet<FO_StructureAdminBoundaries> FO_StructureAdminBoundaries { get; set; }
        public virtual DbSet<FO_StructureIrrigationBoundaries> FO_StructureIrrigationBoundaries { get; set; }
        public virtual DbSet<FO_Drain> FO_Drain { get; set; }
        public virtual DbSet<FO_BreachingSectionExplosives> FO_BreachingSectionExplosives { get; set; }
        public virtual DbSet<PE_ChannelExcluded> PE_ChannelExcluded { get; set; }
        public virtual DbSet<PE_ComplexityFactor> PE_ComplexityFactor { get; set; }
        public virtual DbSet<PE_DivisionComplexityLevel> PE_DivisionComplexityLevel { get; set; }
        public virtual DbSet<PE_KPICategories> PE_KPICategories { get; set; }
        public virtual DbSet<PE_KPISubCategories> PE_KPISubCategories { get; set; }
        public virtual DbSet<FO_DivisionSummary> FO_DivisionSummary { get; set; }
        public virtual DbSet<FO_ItemCategory> FO_ItemCategory { get; set; }
        public virtual DbSet<FO_Items> FO_Items { get; set; }
        public virtual DbSet<FO_ExplosivesCustody> FO_ExplosivesCustody { get; set; }
        public virtual DbSet<SP_RefFillingFraction> SP_RefFillingFraction { get; set; }
        public virtual DbSet<SP_RefFillingFractionHistory> SP_RefFillingFractionHistory { get; set; }
        public virtual DbSet<SP_RefShareDistribution> SP_RefShareDistribution { get; set; }
        public virtual DbSet<SP_RefShareDistributionHistory> SP_RefShareDistributionHistory { get; set; }
        public virtual DbSet<SP_RefWaterDistribution> SP_RefWaterDistribution { get; set; }
        public virtual DbSet<CO_StructureGauge> CO_StructureGauge { get; set; }
        public virtual DbSet<CO_StructureTechPara> CO_StructureTechPara { get; set; }
        public virtual DbSet<WL_RiverIndus> WL_RiverIndus { get; set; }
        public virtual DbSet<WL_RiverJhelumChenab> WL_RiverJhelumChenab { get; set; }
        public virtual DbSet<FO_FloodInspection> FO_FloodInspection { get; set; }
        public virtual DbSet<FO_FloodInspectionDetail> FO_FloodInspectionDetail { get; set; }
        public virtual DbSet<FO_GateType> FO_GateType { get; set; }
        public virtual DbSet<FO_IGCDrain> FO_IGCDrain { get; set; }
        public virtual DbSet<FO_IGCProtectionInfrastructure> FO_IGCProtectionInfrastructure { get; set; }
        public virtual DbSet<FO_InspectionCategory> FO_InspectionCategory { get; set; }
        public virtual DbSet<FO_InspectionConditions> FO_InspectionConditions { get; set; }
        public virtual DbSet<FO_InspectionStatus> FO_InspectionStatus { get; set; }
        public virtual DbSet<FO_InspectionType> FO_InspectionType { get; set; }
        public virtual DbSet<FO_IRDWiseCondition> FO_IRDWiseCondition { get; set; }
        public virtual DbSet<FO_PreMBStatus> FO_PreMBStatus { get; set; }
        public virtual DbSet<FO_RDWiseType> FO_RDWiseType { get; set; }
        public virtual DbSet<FO_StonePitchSide> FO_StonePitchSide { get; set; }
        public virtual DbSet<WL_ChannelLG> WL_ChannelLG { get; set; }
        public virtual DbSet<WL_ChannelLGHistory> WL_ChannelLGHistory { get; set; }
        public virtual DbSet<PE_CategoryWeightage> PE_CategoryWeightage { get; set; }
        public virtual DbSet<PE_EvaluationScores> PE_EvaluationScores { get; set; }
        public virtual DbSet<PE_SubCategoryWeightage> PE_SubCategoryWeightage { get; set; }
        public virtual DbSet<WL_SubDivisionLG> WL_SubDivisionLG { get; set; }
        public virtual DbSet<WL_SubDivisionOfftakeLG> WL_SubDivisionOfftakeLG { get; set; }
        public virtual DbSet<SP_PlanData> SP_PlanData { get; set; }
        public virtual DbSet<SP_PlanDraft> SP_PlanDraft { get; set; }
        public virtual DbSet<FO_EncroachmentType> FO_EncroachmentType { get; set; }
        public virtual DbSet<FO_IProblems> FO_IProblems { get; set; }
        public virtual DbSet<FO_ProblemNature> FO_ProblemNature { get; set; }
        public virtual DbSet<SP_PlanBalance> SP_PlanBalance { get; set; }
        public virtual DbSet<SP_PlanScenario> SP_PlanScenario { get; set; }
        public virtual DbSet<CM_ModuleRef> CM_ModuleRef { get; set; }
        public virtual DbSet<SP_PlanDraftHistory> SP_PlanDraftHistory { get; set; }
        public virtual DbSet<FO_IGCBarrageHW> FO_IGCBarrageHW { get; set; }
        public virtual DbSet<FO_IGCBarrageHWGates> FO_IGCBarrageHWGates { get; set; }
        public virtual DbSet<PE_FieldChannelData> PE_FieldChannelData { get; set; }
        public virtual DbSet<PE_HeadGaugeDifference> PE_HeadGaugeDifference { get; set; }
        public virtual DbSet<PE_PMIUChannelData> PE_PMIUChannelData { get; set; }
        public virtual DbSet<PE_TailGaugeDifference> PE_TailGaugeDifference { get; set; }
        public virtual DbSet<FO_IBreachingSection> FO_IBreachingSection { get; set; }
        public virtual DbSet<FO_DAttachments> FO_DAttachments { get; set; }
        public virtual DbSet<FO_DInfrastructures> FO_DInfrastructures { get; set; }
        public virtual DbSet<FO_DMemberDetails> FO_DMemberDetails { get; set; }
        public virtual DbSet<FO_JAttachments> FO_JAttachments { get; set; }
        public virtual DbSet<FO_JInfrastructures> FO_JInfrastructures { get; set; }
        public virtual DbSet<FO_JMemberDetails> FO_JMemberDetails { get; set; }
        public virtual DbSet<FW_Ref_Classifications> FW_Ref_Classifications { get; set; }
        public virtual DbSet<CO_ChannelDailyGaugeHistory> CO_ChannelDailyGaugeHistory { get; set; }
        public virtual DbSet<CW_ACPExcludedChannel> CW_ACPExcludedChannel { get; set; }
        public virtual DbSet<CW_AnnualClosureProgram> CW_AnnualClosureProgram { get; set; }
        public virtual DbSet<CW_AnnualClosureProgramDetail> CW_AnnualClosureProgramDetail { get; set; }
        public virtual DbSet<CW_AnnualClosureProgramOrder> CW_AnnualClosureProgramOrder { get; set; }
        public virtual DbSet<CW_TechnicalSanctionUnit> CW_TechnicalSanctionUnit { get; set; }
        public virtual DbSet<CO_ChannelParentFeeder> CO_ChannelParentFeeder { get; set; }
        public virtual DbSet<WL_ReachLag> WL_ReachLag { get; set; }
        public virtual DbSet<WL_ReachLagHistory> WL_ReachLagHistory { get; set; }
        public virtual DbSet<PE_EvaluationReports> PE_EvaluationReports { get; set; }
        public virtual DbSet<FO_EmergencyPurchase> FO_EmergencyPurchase { get; set; }
        public virtual DbSet<FO_EPWork> FO_EPWork { get; set; }
        public virtual DbSet<FO_MaterialDisposal> FO_MaterialDisposal { get; set; }
        public virtual DbSet<FO_MaterialDisposalAttachment> FO_MaterialDisposalAttachment { get; set; }
        public virtual DbSet<FO_NatureOfWork> FO_NatureOfWork { get; set; }
        public virtual DbSet<TM_CommitteeMembers> TM_CommitteeMembers { get; set; }
        public virtual DbSet<TM_Contractors> TM_Contractors { get; set; }
        public virtual DbSet<TM_TenderOpeningOffice> TM_TenderOpeningOffice { get; set; }
        public virtual DbSet<TM_FundingSource> TM_FundingSource { get; set; }
        public virtual DbSet<TM_TenderNotice> TM_TenderNotice { get; set; }
        public virtual DbSet<CW_ClosureWorkPlan> CW_ClosureWorkPlan { get; set; }
        public virtual DbSet<CW_WorkProgress> CW_WorkProgress { get; set; }
        public virtual DbSet<CW_WorkProgressAttachment> CW_WorkProgressAttachment { get; set; }
        public virtual DbSet<CW_WorkStatus> CW_WorkStatus { get; set; }
        public virtual DbSet<FO_EPItem> FO_EPItem { get; set; }
        public virtual DbSet<TM_TenderPublishedIn> TM_TenderPublishedIn { get; set; }
        public virtual DbSet<TM_TenderCommitteeMembers> TM_TenderCommitteeMembers { get; set; }
        public virtual DbSet<TM_TenderPrice> TM_TenderPrice { get; set; }
        public virtual DbSet<TM_TenderPriceCDR> TM_TenderPriceCDR { get; set; }
        public virtual DbSet<TM_TenderWorks> TM_TenderWorks { get; set; }
        public virtual DbSet<TM_WorkStatus> TM_WorkStatus { get; set; }
        public virtual DbSet<FO_FFPArrangements> FO_FFPArrangements { get; set; }
        public virtual DbSet<FO_FFPArrangementType> FO_FFPArrangementType { get; set; }
        public virtual DbSet<FO_FFPCampSites> FO_FFPCampSites { get; set; }
        public virtual DbSet<FO_FFPStonePosition> FO_FFPStonePosition { get; set; }
        public virtual DbSet<FO_SDImages> FO_SDImages { get; set; }
        public virtual DbSet<CW_WorkItem> CW_WorkItem { get; set; }
        public virtual DbSet<CW_WorkType> CW_WorkType { get; set; }
        public virtual DbSet<TM_TenderWorksContractors> TM_TenderWorksContractors { get; set; }
        public virtual DbSet<FO_DSEntryType> FO_DSEntryType { get; set; }
        public virtual DbSet<TM_TenderWorkAttachment> TM_TenderWorkAttachment { get; set; }
        public virtual DbSet<PE_EvaluationScoresDetail> PE_EvaluationScoresDetail { get; set; }
        public virtual DbSet<FO_OMCampSiteItems> FO_OMCampSiteItems { get; set; }
        public virtual DbSet<FO_OMCampSites> FO_OMCampSites { get; set; }
        public virtual DbSet<FO_OMStonePosition> FO_OMStonePosition { get; set; }
        public virtual DbSet<FO_OverallDivItems> FO_OverallDivItems { get; set; }
        public virtual DbSet<FO_StoneDeployment> FO_StoneDeployment { get; set; }
        public virtual DbSet<TM_ADMAttachment> TM_ADMAttachment { get; set; }
        public virtual DbSet<ED_ChannelFlow7782> ED_ChannelFlow7782 { get; set; }
        public virtual DbSet<ED_ChildChannelEntitlement> ED_ChildChannelEntitlement { get; set; }
        public virtual DbSet<ED_TDailyGaugeReading> ED_TDailyGaugeReading { get; set; }
        public virtual DbSet<RP_Attachment> RP_Attachment { get; set; }
        public virtual DbSet<RP_Division> RP_Division { get; set; }
        public virtual DbSet<RP_Group> RP_Group { get; set; }
        public virtual DbSet<RP_PriorityType> RP_PriorityType { get; set; }
        public virtual DbSet<RP_Rotation_Circle> RP_Rotation_Circle { get; set; }
        public virtual DbSet<RP_Channel> RP_Channel { get; set; }
        public virtual DbSet<ED_ProvincialEntitlement> ED_ProvincialEntitlement { get; set; }
        public virtual DbSet<FO_IStonePosition> FO_IStonePosition { get; set; }
        public virtual DbSet<RP_SubGroup> RP_SubGroup { get; set; }
        public virtual DbSet<ED_ChannelFlowPara2> ED_ChannelFlowPara2 { get; set; }
        public virtual DbSet<RP_Rotation_DivisionSubDivision> RP_Rotation_DivisionSubDivision { get; set; }
        public virtual DbSet<CO_ChannelDailyGaugeReading> CO_ChannelDailyGaugeReading { get; set; }
        public virtual DbSet<CO_ChannelGaugeDTPFall> CO_ChannelGaugeDTPFall { get; set; }
        public virtual DbSet<CO_ChannelGaugeDTPGatedStructure> CO_ChannelGaugeDTPGatedStructure { get; set; }
        public virtual DbSet<CO_ChannelOutletsPerformance> CO_ChannelOutletsPerformance { get; set; }
        public virtual DbSet<WT_Breach> WT_Breach { get; set; }
        public virtual DbSet<WT_FeettoIgnore> WT_FeettoIgnore { get; set; }
        public virtual DbSet<WT_OffenceType> WT_OffenceType { get; set; }
        public virtual DbSet<WT_OutletDefectiveDetails> WT_OutletDefectiveDetails { get; set; }
        public virtual DbSet<WT_OutletDefectiveType> WT_OutletDefectiveType { get; set; }
        public virtual DbSet<WT_Status> WT_Status { get; set; }
        public virtual DbSet<WT_TheftSiteCondition> WT_TheftSiteCondition { get; set; }
        public virtual DbSet<WT_WaterTheftAttachments> WT_WaterTheftAttachments { get; set; }
        public virtual DbSet<FO_FloodFightingPlan> FO_FloodFightingPlan { get; set; }
        public virtual DbSet<AM_AssetInspectLotCondition> AM_AssetInspectLotCondition { get; set; }
        public virtual DbSet<AM_AssetItems> AM_AssetItems { get; set; }
        public virtual DbSet<AM_AssetWorkProgressAttachment> AM_AssetWorkProgressAttachment { get; set; }
        public virtual DbSet<AM_AssetWorkType> AM_AssetWorkType { get; set; }
        public virtual DbSet<AM_Attributes> AM_Attributes { get; set; }
        public virtual DbSet<AM_Category> AM_Category { get; set; }
        public virtual DbSet<AM_Offices> AM_Offices { get; set; }
        public virtual DbSet<AM_SubCategory> AM_SubCategory { get; set; }
        public virtual DbSet<FO_DivisionStore> FO_DivisionStore { get; set; }
        public virtual DbSet<UA_Roles> UA_Roles { get; set; }
        public virtual DbSet<UA_Designations> UA_Designations { get; set; }
        public virtual DbSet<AM_AssetWorkProgress> AM_AssetWorkProgress { get; set; }
        public virtual DbSet<CO_GaugeSlipSite> CO_GaugeSlipSite { get; set; }
        public virtual DbSet<CO_BarrageDailyData> CO_BarrageDailyData { get; set; }
        public virtual DbSet<CO_BarrageDailyDataHistory> CO_BarrageDailyDataHistory { get; set; }
        public virtual DbSet<SD_DamTechPara> SD_DamTechPara { get; set; }
        public virtual DbSet<SD_DamType> SD_DamType { get; set; }
        public virtual DbSet<SD_OMCost> SD_OMCost { get; set; }
        public virtual DbSet<SD_SmallChannelData> SD_SmallChannelData { get; set; }
        public virtual DbSet<SD_SpillwayType> SD_SpillwayType { get; set; }
        public virtual DbSet<SD_Village> SD_Village { get; set; }
        public virtual DbSet<AC_AdvertisementSource> AC_AdvertisementSource { get; set; }
        public virtual DbSet<AC_ApprovelAuthority> AC_ApprovelAuthority { get; set; }
        public virtual DbSet<AC_AuctionAssetDetail> AC_AuctionAssetDetail { get; set; }
        public virtual DbSet<AC_AuctionCategory> AC_AuctionCategory { get; set; }
        public virtual DbSet<AC_AuctionNotice> AC_AuctionNotice { get; set; }
        public virtual DbSet<AC_AuctionType> AC_AuctionType { get; set; }
        public virtual DbSet<AC_BidderEarnestMoney> AC_BidderEarnestMoney { get; set; }
        public virtual DbSet<EC_ApplicableTaxes> EC_ApplicableTaxes { get; set; }
        public virtual DbSet<EC_Bank> EC_Bank { get; set; }
        public virtual DbSet<EC_CanalSpecialWater> EC_CanalSpecialWater { get; set; }
        public virtual DbSet<EC_DischargeSupplySource> EC_DischargeSupplySource { get; set; }
        public virtual DbSet<EC_EffuentWaterDetails> EC_EffuentWaterDetails { get; set; }
        public virtual DbSet<EC_Industry> EC_Industry { get; set; }
        public virtual DbSet<EC_IndustryType> EC_IndustryType { get; set; }
        public virtual DbSet<EC_PaymentType> EC_PaymentType { get; set; }
        public virtual DbSet<EC_ServiceType> EC_ServiceType { get; set; }
        public virtual DbSet<EC_SurchargeAmount> EC_SurchargeAmount { get; set; }
        public virtual DbSet<EC_WaterCharges> EC_WaterCharges { get; set; }
        public virtual DbSet<SD_SmallDam> SD_SmallDam { get; set; }
        public virtual DbSet<AM_Attachment> AM_Attachment { get; set; }
        public virtual DbSet<FO_FloodGauge> FO_FloodGauge { get; set; }
        public virtual DbSet<FO_FloodGaugeType> FO_FloodGaugeType { get; set; }
        public virtual DbSet<FO_StructureNalaHillTorant> FO_StructureNalaHillTorant { get; set; }
        public virtual DbSet<AM_AssetCondition> AM_AssetCondition { get; set; }
        public virtual DbSet<AC_AuctionAssetItems> AC_AuctionAssetItems { get; set; }
        public virtual DbSet<AM_HeadquarterDivision> AM_HeadquarterDivision { get; set; }
        public virtual DbSet<EC_PrintBillSertup> EC_PrintBillSertup { get; set; }
        public virtual DbSet<EC_BillFactor> EC_BillFactor { get; set; }
        public virtual DbSet<EC_Bills> EC_Bills { get; set; }
        public virtual DbSet<EC_GenerateBillParameters> EC_GenerateBillParameters { get; set; }
        public virtual DbSet<CO_ChannelReachLSP> CO_ChannelReachLSP { get; set; }
        public virtual DbSet<CO_OutletAlterationHistroy> CO_OutletAlterationHistroy { get; set; }
        public virtual DbSet<SD_SmallDamData> SD_SmallDamData { get; set; }
        public virtual DbSet<AC_AuctionCommiteeMembers> AC_AuctionCommiteeMembers { get; set; }
        public virtual DbSet<AC_AuctionOpening> AC_AuctionOpening { get; set; }
        public virtual DbSet<EC_SanctionedDischargeSupply> EC_SanctionedDischargeSupply { get; set; }
        public virtual DbSet<CO_GaugeSlipDailyData> CO_GaugeSlipDailyData { get; set; }
        public virtual DbSet<AC_AuctionPrice> AC_AuctionPrice { get; set; }
        public virtual DbSet<SI_ChannelGaugeReading> SI_ChannelGaugeReading { get; set; }
        public virtual DbSet<SI_GeneralInspections> SI_GeneralInspections { get; set; }
        public virtual DbSet<SI_GeneralInspectionsAttachment> SI_GeneralInspectionsAttachment { get; set; }
        public virtual DbSet<SI_GeneralInspectionType> SI_GeneralInspectionType { get; set; }
        public virtual DbSet<SI_InspectionType> SI_InspectionType { get; set; }
        public virtual DbSet<SI_OutletAlterationHistroy> SI_OutletAlterationHistroy { get; set; }
        public virtual DbSet<SI_Schedule> SI_Schedule { get; set; }
        public virtual DbSet<SI_ScheduleDetailChannel> SI_ScheduleDetailChannel { get; set; }
        public virtual DbSet<SI_ScheduleDetailGeneral> SI_ScheduleDetailGeneral { get; set; }
        public virtual DbSet<SI_ScheduleDetailTender> SI_ScheduleDetailTender { get; set; }
        public virtual DbSet<SI_ScheduleDetailWorks> SI_ScheduleDetailWorks { get; set; }
        public virtual DbSet<SI_ScheduleStatus> SI_ScheduleStatus { get; set; }
        public virtual DbSet<SI_ScheduleStatusDetail> SI_ScheduleStatusDetail { get; set; }
        public virtual DbSet<AT_AccountsHead> AT_AccountsHead { get; set; }
        public virtual DbSet<AT_AccountsSetup> AT_AccountsSetup { get; set; }
        public virtual DbSet<AT_AssetType> AT_AssetType { get; set; }
        public virtual DbSet<AT_DailyRate> AT_DailyRate { get; set; }
        public virtual DbSet<AT_ExpenseOfParts> AT_ExpenseOfParts { get; set; }
        public virtual DbSet<AT_ExpenseQuotation> AT_ExpenseQuotation { get; set; }
        public virtual DbSet<AT_ExpenseType> AT_ExpenseType { get; set; }
        public virtual DbSet<AT_KeyParts> AT_KeyParts { get; set; }
        public virtual DbSet<AT_ObjectClassification> AT_ObjectClassification { get; set; }
        public virtual DbSet<AT_TaxRate> AT_TaxRate { get; set; }
        public virtual DbSet<AT_BudgetApprovel> AT_BudgetApprovel { get; set; }
        public virtual DbSet<AT_BudgetUtilization> AT_BudgetUtilization { get; set; }
        public virtual DbSet<AC_AuctionAssets> AC_AuctionAssets { get; set; }
        public virtual DbSet<AC_AuctionPayment> AC_AuctionPayment { get; set; }
        public virtual DbSet<AM_AssetAttributes> AM_AssetAttributes { get; set; }
        public virtual DbSet<AM_AssetWork> AM_AssetWork { get; set; }
        public virtual DbSet<AM_AssetWorkDetail> AM_AssetWorkDetail { get; set; }
        public virtual DbSet<FO_FloodGaugeReading> FO_FloodGaugeReading { get; set; }
        public virtual DbSet<AT_AssetAllocation> AT_AssetAllocation { get; set; }
        public virtual DbSet<AC_AuctionBidder> AC_AuctionBidder { get; set; }
        public virtual DbSet<AT_SanctionStatus> AT_SanctionStatus { get; set; }
        public virtual DbSet<SYS_Logs> SYS_Logs { get; set; }
        public virtual DbSet<AT_FundReleaseDetails> AT_FundReleaseDetails { get; set; }
        public virtual DbSet<RP_EnteringChannel> RP_EnteringChannel { get; set; }
        public virtual DbSet<EC_Payments> EC_Payments { get; set; }
        public virtual DbSet<SD_SmallChannel> SD_SmallChannel { get; set; }
        public virtual DbSet<AM_AssetInspectionInd> AM_AssetInspectionInd { get; set; }
        public virtual DbSet<AM_AssetInspectionLot> AM_AssetInspectionLot { get; set; }
        public virtual DbSet<AT_SanctionPayment> AT_SanctionPayment { get; set; }
        public virtual DbSet<AT_ResourceAllocation> AT_ResourceAllocation { get; set; }
        public virtual DbSet<RP_PlanImplementation> RP_PlanImplementation { get; set; }
        public virtual DbSet<RP_PlanImplementationPercentage> RP_PlanImplementationPercentage { get; set; }
        public virtual DbSet<AC_AuctionNoticeAttachment> AC_AuctionNoticeAttachment { get; set; }
        public virtual DbSet<AT_FundRelease> AT_FundRelease { get; set; }
        public virtual DbSet<RP_Approval> RP_Approval { get; set; }
        public virtual DbSet<AT_ExpenseSanction> AT_ExpenseSanction { get; set; }
        public virtual DbSet<AT_MonthlyExpenses> AT_MonthlyExpenses { get; set; }
        public virtual DbSet<AC_AuctionStatusDetails> AC_AuctionStatusDetails { get; set; }
        public virtual DbSet<CW_ClosureWork> CW_ClosureWork { get; set; }
        public virtual DbSet<RP_AvgDPR> RP_AvgDPR { get; set; }
        public virtual DbSet<RP_RotationalProgram> RP_RotationalProgram { get; set; }
        public virtual DbSet<UA_LoginHistory> UA_LoginHistory { get; set; }
        public virtual DbSet<UA_AssociatedLocationHistory> UA_AssociatedLocationHistory { get; set; }
        public virtual DbSet<UA_Users> UA_Users { get; set; }
        public virtual DbSet<PE_DivisionExcluded> PE_DivisionExcluded { get; set; }
        public virtual DbSet<AT_FundReleaseTypes> AT_FundReleaseTypes { get; set; }
        public virtual DbSet<CO_Channel> CO_Channel { get; set; }
        public virtual DbSet<ED_ChannelDeliveries> ED_ChannelDeliveries { get; set; }
        public virtual DbSet<ED_ChannelEntitlement> ED_ChannelEntitlement { get; set; }
        public virtual DbSet<ED_ChannelWeightedAvg> ED_ChannelWeightedAvg { get; set; }
        public virtual DbSet<ED_ChannelWeightedAvgDeliveries> ED_ChannelWeightedAvgDeliveries { get; set; }
        public virtual DbSet<ED_SeasonalDeliveries> ED_SeasonalDeliveries { get; set; }
        public virtual DbSet<ED_SeasonalEntitlement> ED_SeasonalEntitlement { get; set; }
        public virtual DbSet<ED_SeasonalWeightedAvg> ED_SeasonalWeightedAvg { get; set; }
        public virtual DbSet<ED_SeasonalWeightedAvgDeliveries> ED_SeasonalWeightedAvgDeliveries { get; set; }
        public virtual DbSet<ED_CommandChannelChilds> ED_CommandChannelChilds { get; set; }
        public virtual DbSet<ED_CommandChannel> ED_CommandChannel { get; set; }
        public virtual DbSet<CO_ChannelGauge> CO_ChannelGauge { get; set; }
        public virtual DbSet<FO_ProtectionInfrastructure> FO_ProtectionInfrastructure { get; set; }
        public virtual DbSet<AT_Sanction> AT_Sanction { get; set; }
        public virtual DbSet<AT_PaymentDetails> AT_PaymentDetails { get; set; }
        public virtual DbSet<CO_VehicleReadings> CO_VehicleReadings { get; set; }
        public virtual DbSet<ET_VehicleReading> ET_VehicleReading { get; set; }
        public virtual DbSet<ET_Leaves> ET_Leaves { get; set; }
        public virtual DbSet<ET_LeaveTypes> ET_LeaveTypes { get; set; }
        public virtual DbSet<SI_OutletChecking> SI_OutletChecking { get; set; }
        public virtual DbSet<WT_WaterTheftCase> WT_WaterTheftCase { get; set; }
        public virtual DbSet<CO_ChannelOutlets> CO_ChannelOutlets { get; set; }
        public virtual DbSet<RP_RotationalViolation> RP_RotationalViolation { get; set; }
        public virtual DbSet<ET_RotationalViolation> ET_RotationalViolation { get; set; }
        public virtual DbSet<IW_PunjabIndent> IW_PunjabIndent { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual ObjectResult<SubDivDailyGaugeData_Result> SubDivDailyGaugeData(Nullable<long> subDivID)
        {
            var subDivIDParameter = subDivID.HasValue ?
                new ObjectParameter("SubDivID", subDivID) :
                new ObjectParameter("SubDivID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SubDivDailyGaugeData_Result>("SubDivDailyGaugeData", subDivIDParameter);
        }
    
        public virtual ObjectResult<GetBarrageDailyDischargeData_Result> GetBarrageDailyDischargeData(Nullable<long> barrageID, Nullable<System.DateTime> date)
        {
            var barrageIDParameter = barrageID.HasValue ?
                new ObjectParameter("BarrageID", barrageID) :
                new ObjectParameter("BarrageID", typeof(long));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetBarrageDailyDischargeData_Result>("GetBarrageDailyDischargeData", barrageIDParameter, dateParameter);
        }
    
        public virtual int sp_alterdiagram1(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram1", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram1(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram1", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram1(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram1", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition1_Result> sp_helpdiagramdefinition1(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition1_Result>("sp_helpdiagramdefinition1", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams1_Result> sp_helpdiagrams1(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams1_Result>("sp_helpdiagrams1", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram1(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram1", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams1()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams1");
        }
    
        public virtual ObjectResult<AddUserGauges_Result> AddUserGauges(Nullable<long> userID, Nullable<long> gaugeID, Nullable<bool> gaugeF, Nullable<bool> gaugeP, Nullable<double> gaugeValue, Nullable<double> dischargeValue, string remarks)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(long));
    
            var gaugeIDParameter = gaugeID.HasValue ?
                new ObjectParameter("GaugeID", gaugeID) :
                new ObjectParameter("GaugeID", typeof(long));
    
            var gaugeFParameter = gaugeF.HasValue ?
                new ObjectParameter("GaugeF", gaugeF) :
                new ObjectParameter("GaugeF", typeof(bool));
    
            var gaugePParameter = gaugeP.HasValue ?
                new ObjectParameter("GaugeP", gaugeP) :
                new ObjectParameter("GaugeP", typeof(bool));
    
            var gaugeValueParameter = gaugeValue.HasValue ?
                new ObjectParameter("GaugeValue", gaugeValue) :
                new ObjectParameter("GaugeValue", typeof(double));
    
            var dischargeValueParameter = dischargeValue.HasValue ?
                new ObjectParameter("DischargeValue", dischargeValue) :
                new ObjectParameter("DischargeValue", typeof(double));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AddUserGauges_Result>("AddUserGauges", userIDParameter, gaugeIDParameter, gaugeFParameter, gaugePParameter, gaugeValueParameter, dischargeValueParameter, remarksParameter);
        }
    
        public virtual int GetBarrageDailyDischargeData1(Nullable<long> barrageID, Nullable<System.DateTime> date)
        {
            var barrageIDParameter = barrageID.HasValue ?
                new ObjectParameter("BarrageID", barrageID) :
                new ObjectParameter("BarrageID", typeof(long));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetBarrageDailyDischargeData1", barrageIDParameter, dateParameter);
        }
    
        public virtual int AddBarrageDailyDischargeData(Nullable<long> barrageID, Nullable<System.DateTime> date, string time, string fullStr, string userID, Nullable<bool> gRMissed, string source)
        {
            var barrageIDParameter = barrageID.HasValue ?
                new ObjectParameter("BarrageID", barrageID) :
                new ObjectParameter("BarrageID", typeof(long));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var timeParameter = time != null ?
                new ObjectParameter("Time", time) :
                new ObjectParameter("Time", typeof(string));
    
            var fullStrParameter = fullStr != null ?
                new ObjectParameter("FullStr", fullStr) :
                new ObjectParameter("FullStr", typeof(string));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            var gRMissedParameter = gRMissed.HasValue ?
                new ObjectParameter("GRMissed", gRMissed) :
                new ObjectParameter("GRMissed", typeof(bool));
    
            var sourceParameter = source != null ?
                new ObjectParameter("Source", source) :
                new ObjectParameter("Source", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddBarrageDailyDischargeData", barrageIDParameter, dateParameter, timeParameter, fullStrParameter, userIDParameter, gRMissedParameter, sourceParameter);
        }
    
        public virtual ObjectResult<AddChannelDailyGaugeReading_Result> AddChannelDailyGaugeReading(Nullable<long> userID, Nullable<long> gaugeID, Nullable<bool> gaugeF, Nullable<bool> gaugeP, Nullable<double> gaugeValue, Nullable<double> dischargeValue, string remarks)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(long));
    
            var gaugeIDParameter = gaugeID.HasValue ?
                new ObjectParameter("GaugeID", gaugeID) :
                new ObjectParameter("GaugeID", typeof(long));
    
            var gaugeFParameter = gaugeF.HasValue ?
                new ObjectParameter("GaugeF", gaugeF) :
                new ObjectParameter("GaugeF", typeof(bool));
    
            var gaugePParameter = gaugeP.HasValue ?
                new ObjectParameter("GaugeP", gaugeP) :
                new ObjectParameter("GaugeP", typeof(bool));
    
            var gaugeValueParameter = gaugeValue.HasValue ?
                new ObjectParameter("GaugeValue", gaugeValue) :
                new ObjectParameter("GaugeValue", typeof(double));
    
            var dischargeValueParameter = dischargeValue.HasValue ?
                new ObjectParameter("DischargeValue", dischargeValue) :
                new ObjectParameter("DischargeValue", typeof(double));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AddChannelDailyGaugeReading_Result>("AddChannelDailyGaugeReading", userIDParameter, gaugeIDParameter, gaugeFParameter, gaugePParameter, gaugeValueParameter, dischargeValueParameter, remarksParameter);
        }
    
        [DbFunction("WRMIS_Entities", "ufn_GetChannelIrrigationData")]
        public virtual IQueryable<ufn_GetChannelIrrigationData_Result> ufn_GetChannelIrrigationData(Nullable<long> zoneID, Nullable<long> cirlceID, Nullable<long> divisionID, Nullable<long> subDivisionID, string channelName)
        {
            var zoneIDParameter = zoneID.HasValue ?
                new ObjectParameter("ZoneID", zoneID) :
                new ObjectParameter("ZoneID", typeof(long));
    
            var cirlceIDParameter = cirlceID.HasValue ?
                new ObjectParameter("CirlceID", cirlceID) :
                new ObjectParameter("CirlceID", typeof(long));
    
            var divisionIDParameter = divisionID.HasValue ?
                new ObjectParameter("DivisionID", divisionID) :
                new ObjectParameter("DivisionID", typeof(long));
    
            var subDivisionIDParameter = subDivisionID.HasValue ?
                new ObjectParameter("SubDivisionID", subDivisionID) :
                new ObjectParameter("SubDivisionID", typeof(long));
    
            var channelNameParameter = channelName != null ?
                new ObjectParameter("ChannelName", channelName) :
                new ObjectParameter("ChannelName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<ufn_GetChannelIrrigationData_Result>("[WRMIS_Entities].[ufn_GetChannelIrrigationData](@ZoneID, @CirlceID, @DivisionID, @SubDivisionID, @ChannelName)", zoneIDParameter, cirlceIDParameter, divisionIDParameter, subDivisionIDParameter, channelNameParameter);
        }
    
        public virtual ObjectResult<usp_GetDailyDataAuditTrail_Result> usp_GetDailyDataAuditTrail(Nullable<System.DateTime> date, Nullable<int> session, Nullable<long> dailyGaugeReadingID, Nullable<int> pageIndex, Nullable<int> pageSize)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var sessionParameter = session.HasValue ?
                new ObjectParameter("Session", session) :
                new ObjectParameter("Session", typeof(int));
    
            var dailyGaugeReadingIDParameter = dailyGaugeReadingID.HasValue ?
                new ObjectParameter("DailyGaugeReadingID", dailyGaugeReadingID) :
                new ObjectParameter("DailyGaugeReadingID", typeof(long));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetDailyDataAuditTrail_Result>("usp_GetDailyDataAuditTrail", dateParameter, sessionParameter, dailyGaugeReadingIDParameter, pageIndexParameter, pageSizeParameter);
        }
    
        public virtual ObjectResult<Nullable<double>> GetTailDischargeFromTailOfftakes(Nullable<long> channelID, Nullable<int> pChannelRD)
        {
            var channelIDParameter = channelID.HasValue ?
                new ObjectParameter("ChannelID", channelID) :
                new ObjectParameter("ChannelID", typeof(long));
    
            var pChannelRDParameter = pChannelRD.HasValue ?
                new ObjectParameter("PChannelRD", pChannelRD) :
                new ObjectParameter("PChannelRD", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<double>>("GetTailDischargeFromTailOfftakes", channelIDParameter, pChannelRDParameter);
        }
    
        public virtual ObjectResult<EditBarrageDailyDischargeData_Result> EditBarrageDailyDischargeData(Nullable<long> barrageID, Nullable<System.DateTime> readingDateTime, string fullStr, string userID, string reason, string source)
        {
            var barrageIDParameter = barrageID.HasValue ?
                new ObjectParameter("BarrageID", barrageID) :
                new ObjectParameter("BarrageID", typeof(long));
    
            var readingDateTimeParameter = readingDateTime.HasValue ?
                new ObjectParameter("ReadingDateTime", readingDateTime) :
                new ObjectParameter("ReadingDateTime", typeof(System.DateTime));
    
            var fullStrParameter = fullStr != null ?
                new ObjectParameter("FullStr", fullStr) :
                new ObjectParameter("FullStr", typeof(string));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            var reasonParameter = reason != null ?
                new ObjectParameter("Reason", reason) :
                new ObjectParameter("Reason", typeof(string));
    
            var sourceParameter = source != null ?
                new ObjectParameter("Source", source) :
                new ObjectParameter("Source", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EditBarrageDailyDischargeData_Result>("EditBarrageDailyDischargeData", barrageIDParameter, readingDateTimeParameter, fullStrParameter, userIDParameter, reasonParameter, sourceParameter);
        }
    
        public virtual ObjectResult<Nullable<double>> GetTailOfftakes_Working(Nullable<long> channelID, Nullable<int> pChannelRD)
        {
            var channelIDParameter = channelID.HasValue ?
                new ObjectParameter("ChannelID", channelID) :
                new ObjectParameter("ChannelID", typeof(long));
    
            var pChannelRDParameter = pChannelRD.HasValue ?
                new ObjectParameter("PChannelRD", pChannelRD) :
                new ObjectParameter("PChannelRD", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<double>>("GetTailOfftakes_Working", channelIDParameter, pChannelRDParameter);
        }
    
        public virtual ObjectResult<GetUserDivisions_Result> GetUserDivisions(Nullable<long> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUserDivisions_Result>("GetUserDivisions", userIDParameter);
        }
    
        public virtual ObjectResult<GetUserGaugesStationBaised_Result> GetUserGaugesStationBaised(Nullable<long> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUserGaugesStationBaised_Result>("GetUserGaugesStationBaised", userIDParameter);
        }
    
        public virtual ObjectResult<GetUserSection_Result> GetUserSection(Nullable<long> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUserSection_Result>("GetUserSection", userIDParameter);
        }
    
        public virtual ObjectResult<GetUserSubDivisions_Result> GetUserSubDivisions(Nullable<long> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUserSubDivisions_Result>("GetUserSubDivisions", userIDParameter);
        }
    
        public virtual int sp_alterdiagram2(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram2", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram2(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram2", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram2(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram2", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition2_Result> sp_helpdiagramdefinition2(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition2_Result>("sp_helpdiagramdefinition2", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams2_Result> sp_helpdiagrams2(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams2_Result>("sp_helpdiagrams2", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram2(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram2", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams2()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams2");
        }
    
        public virtual ObjectResult<GetBarrageAttribute_Result> GetBarrageAttribute(Nullable<long> barrageID)
        {
            var barrageIDParameter = barrageID.HasValue ?
                new ObjectParameter("BarrageID", barrageID) :
                new ObjectParameter("BarrageID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetBarrageAttribute_Result>("GetBarrageAttribute", barrageIDParameter);
        }
    
        public virtual ObjectResult<GetBarrageDailyDischargeDataMobile_Result> GetBarrageDailyDischargeDataMobile(Nullable<long> barrageID, Nullable<System.DateTime> date)
        {
            var barrageIDParameter = barrageID.HasValue ?
                new ObjectParameter("BarrageID", barrageID) :
                new ObjectParameter("BarrageID", typeof(long));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetBarrageDailyDischargeDataMobile_Result>("GetBarrageDailyDischargeDataMobile", barrageIDParameter, dateParameter);
        }
    
        public virtual ObjectResult<GetDailyDischarge_Result> GetDailyDischarge(Nullable<long> channelID, Nullable<long> sectionID)
        {
            var channelIDParameter = channelID.HasValue ?
                new ObjectParameter("ChannelID", channelID) :
                new ObjectParameter("ChannelID", typeof(long));
    
            var sectionIDParameter = sectionID.HasValue ?
                new ObjectParameter("SectionID", sectionID) :
                new ObjectParameter("SectionID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDailyDischarge_Result>("GetDailyDischarge", channelIDParameter, sectionIDParameter);
        }
    
        public virtual int GetDailyGaugeReading_android(Nullable<long> sectionID, Nullable<long> channelID, Nullable<System.DateTime> date, Nullable<int> session)
        {
            var sectionIDParameter = sectionID.HasValue ?
                new ObjectParameter("SectionID", sectionID) :
                new ObjectParameter("SectionID", typeof(long));
    
            var channelIDParameter = channelID.HasValue ?
                new ObjectParameter("ChannelID", channelID) :
                new ObjectParameter("ChannelID", typeof(long));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var sessionParameter = session.HasValue ?
                new ObjectParameter("Session", session) :
                new ObjectParameter("Session", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetDailyGaugeReading_android", sectionIDParameter, channelIDParameter, dateParameter, sessionParameter);
        }
    
        public virtual ObjectResult<usp_GetSearchChannel_Result> usp_GetSearchChannel(Nullable<long> zoneID, Nullable<long> cirlceID, Nullable<long> divisionID, Nullable<long> subDivisionID, Nullable<long> channelID, Nullable<long> commandNameID, Nullable<long> channelTypeID, Nullable<long> flowTypeID, string channelName, string iMISCode, Nullable<long> parentChannelID, Nullable<long> structureTypeID, Nullable<int> pageIndex, Nullable<int> pageSize)
        {
            var zoneIDParameter = zoneID.HasValue ?
                new ObjectParameter("ZoneID", zoneID) :
                new ObjectParameter("ZoneID", typeof(long));
    
            var cirlceIDParameter = cirlceID.HasValue ?
                new ObjectParameter("CirlceID", cirlceID) :
                new ObjectParameter("CirlceID", typeof(long));
    
            var divisionIDParameter = divisionID.HasValue ?
                new ObjectParameter("DivisionID", divisionID) :
                new ObjectParameter("DivisionID", typeof(long));
    
            var subDivisionIDParameter = subDivisionID.HasValue ?
                new ObjectParameter("SubDivisionID", subDivisionID) :
                new ObjectParameter("SubDivisionID", typeof(long));
    
            var channelIDParameter = channelID.HasValue ?
                new ObjectParameter("ChannelID", channelID) :
                new ObjectParameter("ChannelID", typeof(long));
    
            var commandNameIDParameter = commandNameID.HasValue ?
                new ObjectParameter("CommandNameID", commandNameID) :
                new ObjectParameter("CommandNameID", typeof(long));
    
            var channelTypeIDParameter = channelTypeID.HasValue ?
                new ObjectParameter("ChannelTypeID", channelTypeID) :
                new ObjectParameter("ChannelTypeID", typeof(long));
    
            var flowTypeIDParameter = flowTypeID.HasValue ?
                new ObjectParameter("FlowTypeID", flowTypeID) :
                new ObjectParameter("FlowTypeID", typeof(long));
    
            var channelNameParameter = channelName != null ?
                new ObjectParameter("ChannelName", channelName) :
                new ObjectParameter("ChannelName", typeof(string));
    
            var iMISCodeParameter = iMISCode != null ?
                new ObjectParameter("IMISCode", iMISCode) :
                new ObjectParameter("IMISCode", typeof(string));
    
            var parentChannelIDParameter = parentChannelID.HasValue ?
                new ObjectParameter("ParentChannelID", parentChannelID) :
                new ObjectParameter("ParentChannelID", typeof(long));
    
            var structureTypeIDParameter = structureTypeID.HasValue ?
                new ObjectParameter("StructureTypeID", structureTypeID) :
                new ObjectParameter("StructureTypeID", typeof(long));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetSearchChannel_Result>("usp_GetSearchChannel", zoneIDParameter, cirlceIDParameter, divisionIDParameter, subDivisionIDParameter, channelIDParameter, commandNameIDParameter, channelTypeIDParameter, flowTypeIDParameter, channelNameParameter, iMISCodeParameter, parentChannelIDParameter, structureTypeIDParameter, pageIndexParameter, pageSizeParameter);
        }
    
        public virtual ObjectResult<GetDailyGaugeReadingAndroid_Result> GetDailyGaugeReadingAndroid(Nullable<long> sectionID, Nullable<long> channelID, Nullable<System.DateTime> date, Nullable<int> session)
        {
            var sectionIDParameter = sectionID.HasValue ?
                new ObjectParameter("SectionID", sectionID) :
                new ObjectParameter("SectionID", typeof(long));
    
            var channelIDParameter = channelID.HasValue ?
                new ObjectParameter("ChannelID", channelID) :
                new ObjectParameter("ChannelID", typeof(long));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var sessionParameter = session.HasValue ?
                new ObjectParameter("Session", session) :
                new ObjectParameter("Session", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDailyGaugeReadingAndroid_Result>("GetDailyGaugeReadingAndroid", sectionIDParameter, channelIDParameter, dateParameter, sessionParameter);
        }
    
        public virtual ObjectResult<GetTailofChannelinDivision_Result> GetTailofChannelinDivision(Nullable<long> divisionID)
        {
            var divisionIDParameter = divisionID.HasValue ?
                new ObjectParameter("DivisionID", divisionID) :
                new ObjectParameter("DivisionID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTailofChannelinDivision_Result>("GetTailofChannelinDivision", divisionIDParameter);
        }
    
        public virtual int GetChannelIDAndRDsBySectionIDs(string sectionIDs, Nullable<long> channelID)
        {
            var sectionIDsParameter = sectionIDs != null ?
                new ObjectParameter("SectionIDs", sectionIDs) :
                new ObjectParameter("SectionIDs", typeof(string));
    
            var channelIDParameter = channelID.HasValue ?
                new ObjectParameter("ChannelID", channelID) :
                new ObjectParameter("ChannelID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetChannelIDAndRDsBySectionIDs", sectionIDsParameter, channelIDParameter);
        }
    
        public virtual ObjectResult<GetChannelOfDivision_Result> GetChannelOfDivision(Nullable<long> divisionID)
        {
            var divisionIDParameter = divisionID.HasValue ?
                new ObjectParameter("DivisionID", divisionID) :
                new ObjectParameter("DivisionID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetChannelOfDivision_Result>("GetChannelOfDivision", divisionIDParameter);
        }
    
        public virtual int SearchWaterTheftCases(Nullable<long> userID, Nullable<long> irrigationLevelID, Nullable<long> divisionID, Nullable<long> channelID, Nullable<long> caseStatusID, Nullable<long> assignedToID, Nullable<long> offenceTypeID, string offenceSite, string caseID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string canalWireNo, Nullable<long> canalWireDesignationID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(long));
    
            var irrigationLevelIDParameter = irrigationLevelID.HasValue ?
                new ObjectParameter("IrrigationLevelID", irrigationLevelID) :
                new ObjectParameter("IrrigationLevelID", typeof(long));
    
            var divisionIDParameter = divisionID.HasValue ?
                new ObjectParameter("DivisionID", divisionID) :
                new ObjectParameter("DivisionID", typeof(long));
    
            var channelIDParameter = channelID.HasValue ?
                new ObjectParameter("ChannelID", channelID) :
                new ObjectParameter("ChannelID", typeof(long));
    
            var caseStatusIDParameter = caseStatusID.HasValue ?
                new ObjectParameter("CaseStatusID", caseStatusID) :
                new ObjectParameter("CaseStatusID", typeof(long));
    
            var assignedToIDParameter = assignedToID.HasValue ?
                new ObjectParameter("AssignedToID", assignedToID) :
                new ObjectParameter("AssignedToID", typeof(long));
    
            var offenceTypeIDParameter = offenceTypeID.HasValue ?
                new ObjectParameter("OffenceTypeID", offenceTypeID) :
                new ObjectParameter("OffenceTypeID", typeof(long));
    
            var offenceSiteParameter = offenceSite != null ?
                new ObjectParameter("OffenceSite", offenceSite) :
                new ObjectParameter("OffenceSite", typeof(string));
    
            var caseIDParameter = caseID != null ?
                new ObjectParameter("CaseID", caseID) :
                new ObjectParameter("CaseID", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var canalWireNoParameter = canalWireNo != null ?
                new ObjectParameter("CanalWireNo", canalWireNo) :
                new ObjectParameter("CanalWireNo", typeof(string));
    
            var canalWireDesignationIDParameter = canalWireDesignationID.HasValue ?
                new ObjectParameter("CanalWireDesignationID", canalWireDesignationID) :
                new ObjectParameter("CanalWireDesignationID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SearchWaterTheftCases", userIDParameter, irrigationLevelIDParameter, divisionIDParameter, channelIDParameter, caseStatusIDParameter, assignedToIDParameter, offenceTypeIDParameter, offenceSiteParameter, caseIDParameter, fromDateParameter, toDateParameter, canalWireNoParameter, canalWireDesignationIDParameter);
        }
    
        public virtual int GetUserOutletsStationBaised(Nullable<long> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetUserOutletsStationBaised", userIDParameter);
        }
    
        public virtual int InsertTawaanPoiliceCaseWorking(Nullable<long> userID, Nullable<long> designationID, Nullable<long> caseID, Nullable<double> areaBooked, Nullable<long> areaUnit, Nullable<int> noOfAccused, Nullable<System.DateTime> procedingDate, string zildarRemarks, Nullable<long> assignedToUserID, Nullable<long> assignedToDesignationID, Nullable<System.DateTime> assignedDate, Nullable<long> casestatusID, string remarks)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(long));
    
            var designationIDParameter = designationID.HasValue ?
                new ObjectParameter("DesignationID", designationID) :
                new ObjectParameter("DesignationID", typeof(long));
    
            var caseIDParameter = caseID.HasValue ?
                new ObjectParameter("CaseID", caseID) :
                new ObjectParameter("CaseID", typeof(long));
    
            var areaBookedParameter = areaBooked.HasValue ?
                new ObjectParameter("AreaBooked", areaBooked) :
                new ObjectParameter("AreaBooked", typeof(double));
    
            var areaUnitParameter = areaUnit.HasValue ?
                new ObjectParameter("AreaUnit", areaUnit) :
                new ObjectParameter("AreaUnit", typeof(long));
    
            var noOfAccusedParameter = noOfAccused.HasValue ?
                new ObjectParameter("NoOfAccused", noOfAccused) :
                new ObjectParameter("NoOfAccused", typeof(int));
    
            var procedingDateParameter = procedingDate.HasValue ?
                new ObjectParameter("ProcedingDate", procedingDate) :
                new ObjectParameter("ProcedingDate", typeof(System.DateTime));
    
            var zildarRemarksParameter = zildarRemarks != null ?
                new ObjectParameter("ZildarRemarks", zildarRemarks) :
                new ObjectParameter("ZildarRemarks", typeof(string));
    
            var assignedToUserIDParameter = assignedToUserID.HasValue ?
                new ObjectParameter("AssignedToUserID", assignedToUserID) :
                new ObjectParameter("AssignedToUserID", typeof(long));
    
            var assignedToDesignationIDParameter = assignedToDesignationID.HasValue ?
                new ObjectParameter("AssignedToDesignationID", assignedToDesignationID) :
                new ObjectParameter("AssignedToDesignationID", typeof(long));
    
            var assignedDateParameter = assignedDate.HasValue ?
                new ObjectParameter("AssignedDate", assignedDate) :
                new ObjectParameter("AssignedDate", typeof(System.DateTime));
    
            var casestatusIDParameter = casestatusID.HasValue ?
                new ObjectParameter("CasestatusID", casestatusID) :
                new ObjectParameter("CasestatusID", typeof(long));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertTawaanPoiliceCaseWorking", userIDParameter, designationIDParameter, caseIDParameter, areaBookedParameter, areaUnitParameter, noOfAccusedParameter, procedingDateParameter, zildarRemarksParameter, assignedToUserIDParameter, assignedToDesignationIDParameter, assignedDateParameter, casestatusIDParameter, remarksParameter);
        }
    
        public virtual int InsertWaterTheftStatus(Nullable<long> caseID, Nullable<long> assignedToUserID, Nullable<long> assignedToDesignationID, Nullable<long> assignedByUserID, Nullable<long> assignedByDesignationID, Nullable<System.DateTime> assignedDate, Nullable<long> casestatusID, string remarks)
        {
            var caseIDParameter = caseID.HasValue ?
                new ObjectParameter("CaseID", caseID) :
                new ObjectParameter("CaseID", typeof(long));
    
            var assignedToUserIDParameter = assignedToUserID.HasValue ?
                new ObjectParameter("AssignedToUserID", assignedToUserID) :
                new ObjectParameter("AssignedToUserID", typeof(long));
    
            var assignedToDesignationIDParameter = assignedToDesignationID.HasValue ?
                new ObjectParameter("AssignedToDesignationID", assignedToDesignationID) :
                new ObjectParameter("AssignedToDesignationID", typeof(long));
    
            var assignedByUserIDParameter = assignedByUserID.HasValue ?
                new ObjectParameter("AssignedByUserID", assignedByUserID) :
                new ObjectParameter("AssignedByUserID", typeof(long));
    
            var assignedByDesignationIDParameter = assignedByDesignationID.HasValue ?
                new ObjectParameter("AssignedByDesignationID", assignedByDesignationID) :
                new ObjectParameter("AssignedByDesignationID", typeof(long));
    
            var assignedDateParameter = assignedDate.HasValue ?
                new ObjectParameter("AssignedDate", assignedDate) :
                new ObjectParameter("AssignedDate", typeof(System.DateTime));
    
            var casestatusIDParameter = casestatusID.HasValue ?
                new ObjectParameter("CasestatusID", casestatusID) :
                new ObjectParameter("CasestatusID", typeof(long));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertWaterTheftStatus", caseIDParameter, assignedToUserIDParameter, assignedToDesignationIDParameter, assignedByUserIDParameter, assignedByDesignationIDParameter, assignedDateParameter, casestatusIDParameter, remarksParameter);
        }
    
        public virtual int UpdateTawaanPoiliceCaseWorking(Nullable<long> userID, Nullable<long> designationID, Nullable<long> caseID, string decisionType, Nullable<System.DateTime> decisionDate, Nullable<int> specialCharges, Nullable<double> proposedFine, string sDOLetterNo, Nullable<System.DateTime> sDOLetterDate, string fIRNo, Nullable<System.DateTime> fIRDate, Nullable<bool> imprisonment, Nullable<int> imprisonmentDays, string canalWireNo, Nullable<System.DateTime> canalWireDate, Nullable<long> assignedToUserID, Nullable<long> assignedToDesignationID, Nullable<System.DateTime> assignedDate, Nullable<long> casestatusID, string remarks)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(long));
    
            var designationIDParameter = designationID.HasValue ?
                new ObjectParameter("DesignationID", designationID) :
                new ObjectParameter("DesignationID", typeof(long));
    
            var caseIDParameter = caseID.HasValue ?
                new ObjectParameter("CaseID", caseID) :
                new ObjectParameter("CaseID", typeof(long));
    
            var decisionTypeParameter = decisionType != null ?
                new ObjectParameter("DecisionType", decisionType) :
                new ObjectParameter("DecisionType", typeof(string));
    
            var decisionDateParameter = decisionDate.HasValue ?
                new ObjectParameter("DecisionDate", decisionDate) :
                new ObjectParameter("DecisionDate", typeof(System.DateTime));
    
            var specialChargesParameter = specialCharges.HasValue ?
                new ObjectParameter("SpecialCharges", specialCharges) :
                new ObjectParameter("SpecialCharges", typeof(int));
    
            var proposedFineParameter = proposedFine.HasValue ?
                new ObjectParameter("ProposedFine", proposedFine) :
                new ObjectParameter("ProposedFine", typeof(double));
    
            var sDOLetterNoParameter = sDOLetterNo != null ?
                new ObjectParameter("SDOLetterNo", sDOLetterNo) :
                new ObjectParameter("SDOLetterNo", typeof(string));
    
            var sDOLetterDateParameter = sDOLetterDate.HasValue ?
                new ObjectParameter("SDOLetterDate", sDOLetterDate) :
                new ObjectParameter("SDOLetterDate", typeof(System.DateTime));
    
            var fIRNoParameter = fIRNo != null ?
                new ObjectParameter("FIRNo", fIRNo) :
                new ObjectParameter("FIRNo", typeof(string));
    
            var fIRDateParameter = fIRDate.HasValue ?
                new ObjectParameter("FIRDate", fIRDate) :
                new ObjectParameter("FIRDate", typeof(System.DateTime));
    
            var imprisonmentParameter = imprisonment.HasValue ?
                new ObjectParameter("Imprisonment", imprisonment) :
                new ObjectParameter("Imprisonment", typeof(bool));
    
            var imprisonmentDaysParameter = imprisonmentDays.HasValue ?
                new ObjectParameter("ImprisonmentDays", imprisonmentDays) :
                new ObjectParameter("ImprisonmentDays", typeof(int));
    
            var canalWireNoParameter = canalWireNo != null ?
                new ObjectParameter("CanalWireNo", canalWireNo) :
                new ObjectParameter("CanalWireNo", typeof(string));
    
            var canalWireDateParameter = canalWireDate.HasValue ?
                new ObjectParameter("CanalWireDate", canalWireDate) :
                new ObjectParameter("CanalWireDate", typeof(System.DateTime));
    
            var assignedToUserIDParameter = assignedToUserID.HasValue ?
                new ObjectParameter("AssignedToUserID", assignedToUserID) :
                new ObjectParameter("AssignedToUserID", typeof(long));
    
            var assignedToDesignationIDParameter = assignedToDesignationID.HasValue ?
                new ObjectParameter("AssignedToDesignationID", assignedToDesignationID) :
                new ObjectParameter("AssignedToDesignationID", typeof(long));
    
            var assignedDateParameter = assignedDate.HasValue ?
                new ObjectParameter("AssignedDate", assignedDate) :
                new ObjectParameter("AssignedDate", typeof(System.DateTime));
    
            var casestatusIDParameter = casestatusID.HasValue ?
                new ObjectParameter("CasestatusID", casestatusID) :
                new ObjectParameter("CasestatusID", typeof(long));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateTawaanPoiliceCaseWorking", userIDParameter, designationIDParameter, caseIDParameter, decisionTypeParameter, decisionDateParameter, specialChargesParameter, proposedFineParameter, sDOLetterNoParameter, sDOLetterDateParameter, fIRNoParameter, fIRDateParameter, imprisonmentParameter, imprisonmentDaysParameter, canalWireNoParameter, canalWireDateParameter, assignedToUserIDParameter, assignedToDesignationIDParameter, assignedDateParameter, casestatusIDParameter, remarksParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> InsertWaterTheftCase(string offenceSite, Nullable<long> channelID, Nullable<int> theftSiteRD, Nullable<long> outletID, Nullable<long> offenceTypeID, string offenceSide, Nullable<long> theftSiteConditionID, Nullable<System.DateTime> incidentDateTime, string sitePhoto, string source, Nullable<double> valueofH, Nullable<long> userID, Nullable<System.DateTime> logDateTime, string remarks, Nullable<System.DateTime> fixDate, Nullable<long> caseStatusID, Nullable<bool> isActive, Nullable<System.DateTime> createdDate, Nullable<long> createdBy, Nullable<System.DateTime> modifiedDate, Nullable<long> modifiedBy, string caseNo, Nullable<long> assignedToUserID, Nullable<long> assignedToDesignationID, Nullable<long> assignedByUserID, Nullable<long> assignedByDesignationID, Nullable<System.DateTime> assignedDate, Nullable<long> canalWireID, Nullable<long> defectiveTypeID, Nullable<double> valueOfB, Nullable<double> valueOfY, Nullable<double> valueOfDia)
        {
            var offenceSiteParameter = offenceSite != null ?
                new ObjectParameter("OffenceSite", offenceSite) :
                new ObjectParameter("OffenceSite", typeof(string));
    
            var channelIDParameter = channelID.HasValue ?
                new ObjectParameter("ChannelID", channelID) :
                new ObjectParameter("ChannelID", typeof(long));
    
            var theftSiteRDParameter = theftSiteRD.HasValue ?
                new ObjectParameter("TheftSiteRD", theftSiteRD) :
                new ObjectParameter("TheftSiteRD", typeof(int));
    
            var outletIDParameter = outletID.HasValue ?
                new ObjectParameter("OutletID", outletID) :
                new ObjectParameter("OutletID", typeof(long));
    
            var offenceTypeIDParameter = offenceTypeID.HasValue ?
                new ObjectParameter("OffenceTypeID", offenceTypeID) :
                new ObjectParameter("OffenceTypeID", typeof(long));
    
            var offenceSideParameter = offenceSide != null ?
                new ObjectParameter("OffenceSide", offenceSide) :
                new ObjectParameter("OffenceSide", typeof(string));
    
            var theftSiteConditionIDParameter = theftSiteConditionID.HasValue ?
                new ObjectParameter("TheftSiteConditionID", theftSiteConditionID) :
                new ObjectParameter("TheftSiteConditionID", typeof(long));
    
            var incidentDateTimeParameter = incidentDateTime.HasValue ?
                new ObjectParameter("IncidentDateTime", incidentDateTime) :
                new ObjectParameter("IncidentDateTime", typeof(System.DateTime));
    
            var sitePhotoParameter = sitePhoto != null ?
                new ObjectParameter("SitePhoto", sitePhoto) :
                new ObjectParameter("SitePhoto", typeof(string));
    
            var sourceParameter = source != null ?
                new ObjectParameter("Source", source) :
                new ObjectParameter("Source", typeof(string));
    
            var valueofHParameter = valueofH.HasValue ?
                new ObjectParameter("ValueofH", valueofH) :
                new ObjectParameter("ValueofH", typeof(double));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(long));
    
            var logDateTimeParameter = logDateTime.HasValue ?
                new ObjectParameter("LogDateTime", logDateTime) :
                new ObjectParameter("LogDateTime", typeof(System.DateTime));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var fixDateParameter = fixDate.HasValue ?
                new ObjectParameter("FixDate", fixDate) :
                new ObjectParameter("FixDate", typeof(System.DateTime));
    
            var caseStatusIDParameter = caseStatusID.HasValue ?
                new ObjectParameter("CaseStatusID", caseStatusID) :
                new ObjectParameter("CaseStatusID", typeof(long));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(long));
    
            var caseNoParameter = caseNo != null ?
                new ObjectParameter("CaseNo", caseNo) :
                new ObjectParameter("CaseNo", typeof(string));
    
            var assignedToUserIDParameter = assignedToUserID.HasValue ?
                new ObjectParameter("AssignedToUserID", assignedToUserID) :
                new ObjectParameter("AssignedToUserID", typeof(long));
    
            var assignedToDesignationIDParameter = assignedToDesignationID.HasValue ?
                new ObjectParameter("AssignedToDesignationID", assignedToDesignationID) :
                new ObjectParameter("AssignedToDesignationID", typeof(long));
    
            var assignedByUserIDParameter = assignedByUserID.HasValue ?
                new ObjectParameter("AssignedByUserID", assignedByUserID) :
                new ObjectParameter("AssignedByUserID", typeof(long));
    
            var assignedByDesignationIDParameter = assignedByDesignationID.HasValue ?
                new ObjectParameter("AssignedByDesignationID", assignedByDesignationID) :
                new ObjectParameter("AssignedByDesignationID", typeof(long));
    
            var assignedDateParameter = assignedDate.HasValue ?
                new ObjectParameter("AssignedDate", assignedDate) :
                new ObjectParameter("AssignedDate", typeof(System.DateTime));
    
            var canalWireIDParameter = canalWireID.HasValue ?
                new ObjectParameter("CanalWireID", canalWireID) :
                new ObjectParameter("CanalWireID", typeof(long));
    
            var defectiveTypeIDParameter = defectiveTypeID.HasValue ?
                new ObjectParameter("DefectiveTypeID", defectiveTypeID) :
                new ObjectParameter("DefectiveTypeID", typeof(long));
    
            var valueOfBParameter = valueOfB.HasValue ?
                new ObjectParameter("ValueOfB", valueOfB) :
                new ObjectParameter("ValueOfB", typeof(double));
    
            var valueOfYParameter = valueOfY.HasValue ?
                new ObjectParameter("ValueOfY", valueOfY) :
                new ObjectParameter("ValueOfY", typeof(double));
    
            var valueOfDiaParameter = valueOfDia.HasValue ?
                new ObjectParameter("ValueOfDia", valueOfDia) :
                new ObjectParameter("ValueOfDia", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("InsertWaterTheftCase", offenceSiteParameter, channelIDParameter, theftSiteRDParameter, outletIDParameter, offenceTypeIDParameter, offenceSideParameter, theftSiteConditionIDParameter, incidentDateTimeParameter, sitePhotoParameter, sourceParameter, valueofHParameter, userIDParameter, logDateTimeParameter, remarksParameter, fixDateParameter, caseStatusIDParameter, isActiveParameter, createdDateParameter, createdByParameter, modifiedDateParameter, modifiedByParameter, caseNoParameter, assignedToUserIDParameter, assignedToDesignationIDParameter, assignedByUserIDParameter, assignedByDesignationIDParameter, assignedDateParameter, canalWireIDParameter, defectiveTypeIDParameter, valueOfBParameter, valueOfYParameter, valueOfDiaParameter);
        }
    
        public virtual int DD_GetGaugeSlip(Nullable<System.DateTime> readingDate, Nullable<bool> loadLatest)
        {
            var readingDateParameter = readingDate.HasValue ?
                new ObjectParameter("ReadingDate", readingDate) :
                new ObjectParameter("ReadingDate", typeof(System.DateTime));
    
            var loadLatestParameter = loadLatest.HasValue ?
                new ObjectParameter("LoadLatest", loadLatest) :
                new ObjectParameter("LoadLatest", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DD_GetGaugeSlip", readingDateParameter, loadLatestParameter);
        }
    
        public virtual int DD_GetGaugeSlipDam(Nullable<System.DateTime> readingDate, Nullable<bool> loadLatest, Nullable<int> gaugeSlipIndex)
        {
            var readingDateParameter = readingDate.HasValue ?
                new ObjectParameter("ReadingDate", readingDate) :
                new ObjectParameter("ReadingDate", typeof(System.DateTime));
    
            var loadLatestParameter = loadLatest.HasValue ?
                new ObjectParameter("LoadLatest", loadLatest) :
                new ObjectParameter("LoadLatest", typeof(bool));
    
            var gaugeSlipIndexParameter = gaugeSlipIndex.HasValue ?
                new ObjectParameter("GaugeSlipIndex", gaugeSlipIndex) :
                new ObjectParameter("GaugeSlipIndex", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DD_GetGaugeSlipDam", readingDateParameter, loadLatestParameter, gaugeSlipIndexParameter);
        }
    
        public virtual int DD_GetGaugeSlipOther(Nullable<System.DateTime> readingDate, Nullable<bool> loadLatest, Nullable<int> gaugeSlipIndex)
        {
            var readingDateParameter = readingDate.HasValue ?
                new ObjectParameter("ReadingDate", readingDate) :
                new ObjectParameter("ReadingDate", typeof(System.DateTime));
    
            var loadLatestParameter = loadLatest.HasValue ?
                new ObjectParameter("LoadLatest", loadLatest) :
                new ObjectParameter("LoadLatest", typeof(bool));
    
            var gaugeSlipIndexParameter = gaugeSlipIndex.HasValue ?
                new ObjectParameter("GaugeSlipIndex", gaugeSlipIndex) :
                new ObjectParameter("GaugeSlipIndex", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DD_GetGaugeSlipOther", readingDateParameter, loadLatestParameter, gaugeSlipIndexParameter);
        }
    
        public virtual int GetTailStatus(string channelIDs)
        {
            var channelIDsParameter = channelIDs != null ?
                new ObjectParameter("ChannelIDs", channelIDs) :
                new ObjectParameter("ChannelIDs", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetTailStatus", channelIDsParameter);
        }
    
        public virtual ObjectResult<GetUserOutletsLocationBaised_Result> GetUserOutletsLocationBaised(Nullable<long> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUserOutletsLocationBaised_Result>("GetUserOutletsLocationBaised", userIDParameter);
        }
    
        public virtual int SearchIrrigator(Nullable<long> zoneID, Nullable<long> circleID, Nullable<long> divisionID, Nullable<long> channelID, Nullable<bool> frontTS, Nullable<bool> leftTS, Nullable<bool> rightTS, string status, string mobileNo, Nullable<int> tailStatus)
        {
            var zoneIDParameter = zoneID.HasValue ?
                new ObjectParameter("ZoneID", zoneID) :
                new ObjectParameter("ZoneID", typeof(long));
    
            var circleIDParameter = circleID.HasValue ?
                new ObjectParameter("CircleID", circleID) :
                new ObjectParameter("CircleID", typeof(long));
    
            var divisionIDParameter = divisionID.HasValue ?
                new ObjectParameter("divisionID", divisionID) :
                new ObjectParameter("divisionID", typeof(long));
    
            var channelIDParameter = channelID.HasValue ?
                new ObjectParameter("ChannelID", channelID) :
                new ObjectParameter("ChannelID", typeof(long));
    
            var frontTSParameter = frontTS.HasValue ?
                new ObjectParameter("FrontTS", frontTS) :
                new ObjectParameter("FrontTS", typeof(bool));
    
            var leftTSParameter = leftTS.HasValue ?
                new ObjectParameter("LeftTS", leftTS) :
                new ObjectParameter("LeftTS", typeof(bool));
    
            var rightTSParameter = rightTS.HasValue ?
                new ObjectParameter("RightTS", rightTS) :
                new ObjectParameter("RightTS", typeof(bool));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var mobileNoParameter = mobileNo != null ?
                new ObjectParameter("MobileNo", mobileNo) :
                new ObjectParameter("MobileNo", typeof(string));
    
            var tailStatusParameter = tailStatus.HasValue ?
                new ObjectParameter("TailStatus", tailStatus) :
                new ObjectParameter("TailStatus", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SearchIrrigator", zoneIDParameter, circleIDParameter, divisionIDParameter, channelIDParameter, frontTSParameter, leftTSParameter, rightTSParameter, statusParameter, mobileNoParameter, tailStatusParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> usp_MarkWaterTheftCaseAsNA(Nullable<long> waterTheftID, string canalWireNo, Nullable<System.DateTime> canalWireDate, string remarks, Nullable<long> userID, Nullable<long> assignToDesignationID)
        {
            var waterTheftIDParameter = waterTheftID.HasValue ?
                new ObjectParameter("WaterTheftID", waterTheftID) :
                new ObjectParameter("WaterTheftID", typeof(long));
    
            var canalWireNoParameter = canalWireNo != null ?
                new ObjectParameter("CanalWireNo", canalWireNo) :
                new ObjectParameter("CanalWireNo", typeof(string));
    
            var canalWireDateParameter = canalWireDate.HasValue ?
                new ObjectParameter("CanalWireDate", canalWireDate) :
                new ObjectParameter("CanalWireDate", typeof(System.DateTime));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(long));
    
            var assignToDesignationIDParameter = assignToDesignationID.HasValue ?
                new ObjectParameter("AssignToDesignationID", assignToDesignationID) :
                new ObjectParameter("AssignToDesignationID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_MarkWaterTheftCaseAsNA", waterTheftIDParameter, canalWireNoParameter, canalWireDateParameter, remarksParameter, userIDParameter, assignToDesignationIDParameter);
        }
    
        public virtual int WT_GetChannelIDAndRDsBySectionIDs(string sectionIDs, Nullable<long> channelID)
        {
            var sectionIDsParameter = sectionIDs != null ?
                new ObjectParameter("SectionIDs", sectionIDs) :
                new ObjectParameter("SectionIDs", typeof(string));
    
            var channelIDParameter = channelID.HasValue ?
                new ObjectParameter("ChannelID", channelID) :
                new ObjectParameter("ChannelID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("WT_GetChannelIDAndRDsBySectionIDs", sectionIDsParameter, channelIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> WT_InsertWaterTheftCase(string offenceSite, Nullable<long> channelID, Nullable<int> theftSiteRD, Nullable<long> outletID, Nullable<long> offenceTypeID, string offenceSide, Nullable<long> theftSiteConditionID, Nullable<System.DateTime> incidentDateTime, string sitePhoto, string source, Nullable<double> valueofH, Nullable<long> userID, Nullable<System.DateTime> logDateTime, string remarks, Nullable<System.DateTime> fixDate, Nullable<long> caseStatusID, Nullable<bool> isActive, Nullable<System.DateTime> createdDate, Nullable<long> createdBy, Nullable<System.DateTime> modifiedDate, Nullable<long> modifiedBy, string caseNo, Nullable<double> gIS_X, Nullable<double> gIS_Y, Nullable<long> assignedToUserID, Nullable<long> assignedToDesignationID, Nullable<long> assignedByUserID, Nullable<long> assignedByDesignationID, Nullable<System.DateTime> assignedDate, Nullable<long> canalWireID, Nullable<long> defectiveTypeID, Nullable<double> valueOfB, Nullable<double> valueOfY, Nullable<double> valueOfDia)
        {
            var offenceSiteParameter = offenceSite != null ?
                new ObjectParameter("OffenceSite", offenceSite) :
                new ObjectParameter("OffenceSite", typeof(string));
    
            var channelIDParameter = channelID.HasValue ?
                new ObjectParameter("ChannelID", channelID) :
                new ObjectParameter("ChannelID", typeof(long));
    
            var theftSiteRDParameter = theftSiteRD.HasValue ?
                new ObjectParameter("TheftSiteRD", theftSiteRD) :
                new ObjectParameter("TheftSiteRD", typeof(int));
    
            var outletIDParameter = outletID.HasValue ?
                new ObjectParameter("OutletID", outletID) :
                new ObjectParameter("OutletID", typeof(long));
    
            var offenceTypeIDParameter = offenceTypeID.HasValue ?
                new ObjectParameter("OffenceTypeID", offenceTypeID) :
                new ObjectParameter("OffenceTypeID", typeof(long));
    
            var offenceSideParameter = offenceSide != null ?
                new ObjectParameter("OffenceSide", offenceSide) :
                new ObjectParameter("OffenceSide", typeof(string));
    
            var theftSiteConditionIDParameter = theftSiteConditionID.HasValue ?
                new ObjectParameter("TheftSiteConditionID", theftSiteConditionID) :
                new ObjectParameter("TheftSiteConditionID", typeof(long));
    
            var incidentDateTimeParameter = incidentDateTime.HasValue ?
                new ObjectParameter("IncidentDateTime", incidentDateTime) :
                new ObjectParameter("IncidentDateTime", typeof(System.DateTime));
    
            var sitePhotoParameter = sitePhoto != null ?
                new ObjectParameter("SitePhoto", sitePhoto) :
                new ObjectParameter("SitePhoto", typeof(string));
    
            var sourceParameter = source != null ?
                new ObjectParameter("Source", source) :
                new ObjectParameter("Source", typeof(string));
    
            var valueofHParameter = valueofH.HasValue ?
                new ObjectParameter("ValueofH", valueofH) :
                new ObjectParameter("ValueofH", typeof(double));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(long));
    
            var logDateTimeParameter = logDateTime.HasValue ?
                new ObjectParameter("LogDateTime", logDateTime) :
                new ObjectParameter("LogDateTime", typeof(System.DateTime));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var fixDateParameter = fixDate.HasValue ?
                new ObjectParameter("FixDate", fixDate) :
                new ObjectParameter("FixDate", typeof(System.DateTime));
    
            var caseStatusIDParameter = caseStatusID.HasValue ?
                new ObjectParameter("CaseStatusID", caseStatusID) :
                new ObjectParameter("CaseStatusID", typeof(long));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(long));
    
            var caseNoParameter = caseNo != null ?
                new ObjectParameter("CaseNo", caseNo) :
                new ObjectParameter("CaseNo", typeof(string));
    
            var gIS_XParameter = gIS_X.HasValue ?
                new ObjectParameter("GIS_X", gIS_X) :
                new ObjectParameter("GIS_X", typeof(double));
    
            var gIS_YParameter = gIS_Y.HasValue ?
                new ObjectParameter("GIS_Y", gIS_Y) :
                new ObjectParameter("GIS_Y", typeof(double));
    
            var assignedToUserIDParameter = assignedToUserID.HasValue ?
                new ObjectParameter("AssignedToUserID", assignedToUserID) :
                new ObjectParameter("AssignedToUserID", typeof(long));
    
            var assignedToDesignationIDParameter = assignedToDesignationID.HasValue ?
                new ObjectParameter("AssignedToDesignationID", assignedToDesignationID) :
                new ObjectParameter("AssignedToDesignationID", typeof(long));
    
            var assignedByUserIDParameter = assignedByUserID.HasValue ?
                new ObjectParameter("AssignedByUserID", assignedByUserID) :
                new ObjectParameter("AssignedByUserID", typeof(long));
    
            var assignedByDesignationIDParameter = assignedByDesignationID.HasValue ?
                new ObjectParameter("AssignedByDesignationID", assignedByDesignationID) :
                new ObjectParameter("AssignedByDesignationID", typeof(long));
    
            var assignedDateParameter = assignedDate.HasValue ?
                new ObjectParameter("AssignedDate", assignedDate) :
                new ObjectParameter("AssignedDate", typeof(System.DateTime));
    
            var canalWireIDParameter = canalWireID.HasValue ?
                new ObjectParameter("CanalWireID", canalWireID) :
                new ObjectParameter("CanalWireID", typeof(long));
    
            var defectiveTypeIDParameter = defectiveTypeID.HasValue ?
                new ObjectParameter("DefectiveTypeID", defectiveTypeID) :
                new ObjectParameter("DefectiveTypeID", typeof(long));
    
            var valueOfBParameter = valueOfB.HasValue ?
                new ObjectParameter("ValueOfB", valueOfB) :
                new ObjectParameter("ValueOfB", typeof(double));
    
            var valueOfYParameter = valueOfY.HasValue ?
                new ObjectParameter("ValueOfY", valueOfY) :
                new ObjectParameter("ValueOfY", typeof(double));
    
            var valueOfDiaParameter = valueOfDia.HasValue ?
                new ObjectParameter("ValueOfDia", valueOfDia) :
                new ObjectParameter("ValueOfDia", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("WT_InsertWaterTheftCase", offenceSiteParameter, channelIDParameter, theftSiteRDParameter, outletIDParameter, offenceTypeIDParameter, offenceSideParameter, theftSiteConditionIDParameter, incidentDateTimeParameter, sitePhotoParameter, sourceParameter, valueofHParameter, userIDParameter, logDateTimeParameter, remarksParameter, fixDateParameter, caseStatusIDParameter, isActiveParameter, createdDateParameter, createdByParameter, modifiedDateParameter, modifiedByParameter, caseNoParameter, gIS_XParameter, gIS_YParameter, assignedToUserIDParameter, assignedToDesignationIDParameter, assignedByUserIDParameter, assignedByDesignationIDParameter, assignedDateParameter, canalWireIDParameter, defectiveTypeIDParameter, valueOfBParameter, valueOfYParameter, valueOfDiaParameter);
        }
    
        public virtual int WT_SearchWaterTheftCases(Nullable<long> userID, Nullable<long> irrigationLevelID, Nullable<long> divisionID, Nullable<long> channelID, Nullable<long> caseStatusID, Nullable<long> assignedToID, Nullable<long> offenceTypeID, string offenceSite, string caseID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string canalWireNo, Nullable<long> canalWireDesignationID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(long));
    
            var irrigationLevelIDParameter = irrigationLevelID.HasValue ?
                new ObjectParameter("IrrigationLevelID", irrigationLevelID) :
                new ObjectParameter("IrrigationLevelID", typeof(long));
    
            var divisionIDParameter = divisionID.HasValue ?
                new ObjectParameter("DivisionID", divisionID) :
                new ObjectParameter("DivisionID", typeof(long));
    
            var channelIDParameter = channelID.HasValue ?
                new ObjectParameter("ChannelID", channelID) :
                new ObjectParameter("ChannelID", typeof(long));
    
            var caseStatusIDParameter = caseStatusID.HasValue ?
                new ObjectParameter("CaseStatusID", caseStatusID) :
                new ObjectParameter("CaseStatusID", typeof(long));
    
            var assignedToIDParameter = assignedToID.HasValue ?
                new ObjectParameter("AssignedToID", assignedToID) :
                new ObjectParameter("AssignedToID", typeof(long));
    
            var offenceTypeIDParameter = offenceTypeID.HasValue ?
                new ObjectParameter("OffenceTypeID", offenceTypeID) :
                new ObjectParameter("OffenceTypeID", typeof(long));
    
            var offenceSiteParameter = offenceSite != null ?
                new ObjectParameter("OffenceSite", offenceSite) :
                new ObjectParameter("OffenceSite", typeof(string));
    
            var caseIDParameter = caseID != null ?
                new ObjectParameter("CaseID", caseID) :
                new ObjectParameter("CaseID", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var canalWireNoParameter = canalWireNo != null ?
                new ObjectParameter("CanalWireNo", canalWireNo) :
                new ObjectParameter("CanalWireNo", typeof(string));
    
            var canalWireDesignationIDParameter = canalWireDesignationID.HasValue ?
                new ObjectParameter("CanalWireDesignationID", canalWireDesignationID) :
                new ObjectParameter("CanalWireDesignationID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("WT_SearchWaterTheftCases", userIDParameter, irrigationLevelIDParameter, divisionIDParameter, channelIDParameter, caseStatusIDParameter, assignedToIDParameter, offenceTypeIDParameter, offenceSiteParameter, caseIDParameter, fromDateParameter, toDateParameter, canalWireNoParameter, canalWireDesignationIDParameter);
        }
    
        public virtual int WT_SaveAttachments()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("WT_SaveAttachments");
        }
    
        public virtual ObjectResult<GetChannelSectionOutlets_Result> GetChannelSectionOutlets(Nullable<long> channelID, Nullable<long> sectionID)
        {
            var channelIDParameter = channelID.HasValue ?
                new ObjectParameter("ChannelID", channelID) :
                new ObjectParameter("ChannelID", typeof(long));
    
            var sectionIDParameter = sectionID.HasValue ?
                new ObjectParameter("SectionID", sectionID) :
                new ObjectParameter("SectionID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetChannelSectionOutlets_Result>("GetChannelSectionOutlets", channelIDParameter, sectionIDParameter);
        }
    
        public virtual int WT_SaveBreachAttachments()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("WT_SaveBreachAttachments");
        }
    
        public virtual int GetBarrageDailyDischargeDataHistory(Nullable<long> barrageID, string date)
        {
            var barrageIDParameter = barrageID.HasValue ?
                new ObjectParameter("BarrageID", barrageID) :
                new ObjectParameter("BarrageID", typeof(long));
    
            var dateParameter = date != null ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetBarrageDailyDischargeDataHistory", barrageIDParameter, dateParameter);
        }
    
        public virtual ObjectResult<GetTailStatus1_Result> GetTailStatus1(string channelIDs)
        {
            var channelIDsParameter = channelIDs != null ?
                new ObjectParameter("ChannelIDs", channelIDs) :
                new ObjectParameter("ChannelIDs", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTailStatus1_Result>("GetTailStatus1", channelIDsParameter);
        }
    
        public virtual int IrrigatorFeedbackInfortmation(Nullable<long> irrigatorID)
        {
            var irrigatorIDParameter = irrigatorID.HasValue ?
                new ObjectParameter("IrrigatorID", irrigatorID) :
                new ObjectParameter("IrrigatorID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("IrrigatorFeedbackInfortmation", irrigatorIDParameter);
        }
    
        public virtual int WT_SearchBreach(Nullable<long> userID, Nullable<long> irrigationLevelID, Nullable<long> divisionID, Nullable<long> channelID, string caseID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(long));
    
            var irrigationLevelIDParameter = irrigationLevelID.HasValue ?
                new ObjectParameter("IrrigationLevelID", irrigationLevelID) :
                new ObjectParameter("IrrigationLevelID", typeof(long));
    
            var divisionIDParameter = divisionID.HasValue ?
                new ObjectParameter("DivisionID", divisionID) :
                new ObjectParameter("DivisionID", typeof(long));
    
            var channelIDParameter = channelID.HasValue ?
                new ObjectParameter("ChannelID", channelID) :
                new ObjectParameter("ChannelID", typeof(long));
    
            var caseIDParameter = caseID != null ?
                new ObjectParameter("CaseID", caseID) :
                new ObjectParameter("CaseID", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("WT_SearchBreach", userIDParameter, irrigationLevelIDParameter, divisionIDParameter, channelIDParameter, caseIDParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> usp_AssignWaterTheftCaseToSBEOrZiladar(Nullable<long> waterTheftID, string canalWireNo, Nullable<System.DateTime> canalWireDate, string remarks, Nullable<long> userID, Nullable<long> assignToDesignationID, Nullable<long> canalWireID)
        {
            var waterTheftIDParameter = waterTheftID.HasValue ?
                new ObjectParameter("WaterTheftID", waterTheftID) :
                new ObjectParameter("WaterTheftID", typeof(long));
    
            var canalWireNoParameter = canalWireNo != null ?
                new ObjectParameter("CanalWireNo", canalWireNo) :
                new ObjectParameter("CanalWireNo", typeof(string));
    
            var canalWireDateParameter = canalWireDate.HasValue ?
                new ObjectParameter("CanalWireDate", canalWireDate) :
                new ObjectParameter("CanalWireDate", typeof(System.DateTime));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(long));
    
            var assignToDesignationIDParameter = assignToDesignationID.HasValue ?
                new ObjectParameter("AssignToDesignationID", assignToDesignationID) :
                new ObjectParameter("AssignToDesignationID", typeof(long));
    
            var canalWireIDParameter = canalWireID.HasValue ?
                new ObjectParameter("CanalWireID", canalWireID) :
                new ObjectParameter("CanalWireID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_AssignWaterTheftCaseToSBEOrZiladar", waterTheftIDParameter, canalWireNoParameter, canalWireDateParameter, remarksParameter, userIDParameter, assignToDesignationIDParameter, canalWireIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> usp_AssignWaterTheftCaseToSDO(Nullable<long> waterTheftID, string canalWireNo, Nullable<System.DateTime> canalWireDate, Nullable<System.DateTime> closingRepairDate, string remarks, Nullable<long> userID, Nullable<long> canalWireID)
        {
            var waterTheftIDParameter = waterTheftID.HasValue ?
                new ObjectParameter("WaterTheftID", waterTheftID) :
                new ObjectParameter("WaterTheftID", typeof(long));
    
            var canalWireNoParameter = canalWireNo != null ?
                new ObjectParameter("CanalWireNo", canalWireNo) :
                new ObjectParameter("CanalWireNo", typeof(string));
    
            var canalWireDateParameter = canalWireDate.HasValue ?
                new ObjectParameter("CanalWireDate", canalWireDate) :
                new ObjectParameter("CanalWireDate", typeof(System.DateTime));
    
            var closingRepairDateParameter = closingRepairDate.HasValue ?
                new ObjectParameter("ClosingRepairDate", closingRepairDate) :
                new ObjectParameter("ClosingRepairDate", typeof(System.DateTime));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(long));
    
            var canalWireIDParameter = canalWireID.HasValue ?
                new ObjectParameter("CanalWireID", canalWireID) :
                new ObjectParameter("CanalWireID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_AssignWaterTheftCaseToSDO", waterTheftIDParameter, canalWireNoParameter, canalWireDateParameter, closingRepairDateParameter, remarksParameter, userIDParameter, canalWireIDParameter);
        }
    
        public virtual ObjectResult<WT_GetSBESDOWorkingByWaterTheftID_Result> WT_GetSBESDOWorkingByWaterTheftID(Nullable<long> waterTheftID, Nullable<long> assignedByDesignationID)
        {
            var waterTheftIDParameter = waterTheftID.HasValue ?
                new ObjectParameter("WaterTheftID", waterTheftID) :
                new ObjectParameter("WaterTheftID", typeof(long));
    
            var assignedByDesignationIDParameter = assignedByDesignationID.HasValue ?
                new ObjectParameter("AssignedByDesignationID", assignedByDesignationID) :
                new ObjectParameter("AssignedByDesignationID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<WT_GetSBESDOWorkingByWaterTheftID_Result>("WT_GetSBESDOWorkingByWaterTheftID", waterTheftIDParameter, assignedByDesignationIDParameter);
        }
    
        public virtual int SP_UpdateFillingFraction(Nullable<long> recordID, Nullable<decimal> maxPercentage, Nullable<decimal> minPercentage, Nullable<decimal> likelyPercentage, Nullable<long> userID)
        {
            var recordIDParameter = recordID.HasValue ?
                new ObjectParameter("RecordID", recordID) :
                new ObjectParameter("RecordID", typeof(long));
    
            var maxPercentageParameter = maxPercentage.HasValue ?
                new ObjectParameter("MaxPercentage", maxPercentage) :
                new ObjectParameter("MaxPercentage", typeof(decimal));
    
            var minPercentageParameter = minPercentage.HasValue ?
                new ObjectParameter("MinPercentage", minPercentage) :
                new ObjectParameter("MinPercentage", typeof(decimal));
    
            var likelyPercentageParameter = likelyPercentage.HasValue ?
                new ObjectParameter("LikelyPercentage", likelyPercentage) :
                new ObjectParameter("LikelyPercentage", typeof(decimal));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_UpdateFillingFraction", recordIDParameter, maxPercentageParameter, minPercentageParameter, likelyPercentageParameter, userIDParameter);
        }
    
        public virtual int SP_UpdateShareDistribution(Nullable<long> recordID, Nullable<decimal> balochistan, Nullable<decimal> kPK, Nullable<decimal> historicPunjab, Nullable<decimal> historicSindh, Nullable<decimal> paraPunjab, Nullable<decimal> paraSindh, Nullable<long> userID)
        {
            var recordIDParameter = recordID.HasValue ?
                new ObjectParameter("RecordID", recordID) :
                new ObjectParameter("RecordID", typeof(long));
    
            var balochistanParameter = balochistan.HasValue ?
                new ObjectParameter("Balochistan", balochistan) :
                new ObjectParameter("Balochistan", typeof(decimal));
    
            var kPKParameter = kPK.HasValue ?
                new ObjectParameter("KPK", kPK) :
                new ObjectParameter("KPK", typeof(decimal));
    
            var historicPunjabParameter = historicPunjab.HasValue ?
                new ObjectParameter("HistoricPunjab", historicPunjab) :
                new ObjectParameter("HistoricPunjab", typeof(decimal));
    
            var historicSindhParameter = historicSindh.HasValue ?
                new ObjectParameter("HistoricSindh", historicSindh) :
                new ObjectParameter("HistoricSindh", typeof(decimal));
    
            var paraPunjabParameter = paraPunjab.HasValue ?
                new ObjectParameter("ParaPunjab", paraPunjab) :
                new ObjectParameter("ParaPunjab", typeof(decimal));
    
            var paraSindhParameter = paraSindh.HasValue ?
                new ObjectParameter("ParaSindh", paraSindh) :
                new ObjectParameter("ParaSindh", typeof(decimal));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_UpdateShareDistribution", recordIDParameter, balochistanParameter, kPKParameter, historicPunjabParameter, historicSindhParameter, paraPunjabParameter, paraSindhParameter, userIDParameter);
        }
    
        public virtual ObjectResult<DD_GetChannelsByUserIDForIndents_Result> DD_GetChannelsByUserIDForIndents(Nullable<long> userID, Nullable<long> irrigationLevelID, Nullable<long> subDivID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(long));
    
            var irrigationLevelIDParameter = irrigationLevelID.HasValue ?
                new ObjectParameter("IrrigationLevelID", irrigationLevelID) :
                new ObjectParameter("IrrigationLevelID", typeof(long));
    
            var subDivIDParameter = subDivID.HasValue ?
                new ObjectParameter("SubDivID", subDivID) :
                new ObjectParameter("SubDivID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DD_GetChannelsByUserIDForIndents_Result>("DD_GetChannelsByUserIDForIndents", userIDParameter, irrigationLevelIDParameter, subDivIDParameter);
        }
    
        public virtual int SP_UpdateFlow7782(Nullable<long> recordID, Nullable<decimal> jC7782, Nullable<long> userID)
        {
            var recordIDParameter = recordID.HasValue ?
                new ObjectParameter("RecordID", recordID) :
                new ObjectParameter("RecordID", typeof(long));
    
            var jC7782Parameter = jC7782.HasValue ?
                new ObjectParameter("JC7782", jC7782) :
                new ObjectParameter("JC7782", typeof(decimal));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_UpdateFlow7782", recordIDParameter, jC7782Parameter, userIDParameter);
        }
    
        public virtual ObjectResult<Nullable<double>> DD_GetOutletIndent(Nullable<long> subDivID, Nullable<long> channelID)
        {
            var subDivIDParameter = subDivID.HasValue ?
                new ObjectParameter("SubDivID", subDivID) :
                new ObjectParameter("SubDivID", typeof(long));
    
            var channelIDParameter = channelID.HasValue ?
                new ObjectParameter("ChannelID", channelID) :
                new ObjectParameter("ChannelID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<double>>("DD_GetOutletIndent", subDivIDParameter, channelIDParameter);
        }
    
        public virtual ObjectResult<UA_GetNotifications_Result> UA_GetNotifications(Nullable<long> eventID, Nullable<long> userID)
        {
            var eventIDParameter = eventID.HasValue ?
                new ObjectParameter("EventID", eventID) :
                new ObjectParameter("EventID", typeof(long));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UA_GetNotifications_Result>("UA_GetNotifications", eventIDParameter, userIDParameter);
        }
    
        public virtual ObjectResult<DD_GetDailyIndentsData_Result> DD_GetDailyIndentsData(Nullable<long> subDivID, Nullable<long> channelID, Nullable<System.DateTime> indentPlacementDate)
        {
            var subDivIDParameter = subDivID.HasValue ?
                new ObjectParameter("SubDivID", subDivID) :
                new ObjectParameter("SubDivID", typeof(long));
    
            var channelIDParameter = channelID.HasValue ?
                new ObjectParameter("ChannelID", channelID) :
                new ObjectParameter("ChannelID", typeof(long));
    
            var indentPlacementDateParameter = indentPlacementDate.HasValue ?
                new ObjectParameter("IndentPlacementDate", indentPlacementDate) :
                new ObjectParameter("IndentPlacementDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DD_GetDailyIndentsData_Result>("DD_GetDailyIndentsData", subDivIDParameter, channelIDParameter, indentPlacementDateParameter);
        }
    
        public virtual ObjectResult<Nullable<System.DateTime>> CalculateIndentDate(Nullable<int> pChannelID, Nullable<int> pGaugeID, Nullable<System.DateTime> selectedDate)
        {
            var pChannelIDParameter = pChannelID.HasValue ?
                new ObjectParameter("PChannelID", pChannelID) :
                new ObjectParameter("PChannelID", typeof(int));
    
            var pGaugeIDParameter = pGaugeID.HasValue ?
                new ObjectParameter("PGaugeID", pGaugeID) :
                new ObjectParameter("PGaugeID", typeof(int));
    
            var selectedDateParameter = selectedDate.HasValue ?
                new ObjectParameter("SelectedDate", selectedDate) :
                new ObjectParameter("SelectedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<System.DateTime>>("CalculateIndentDate", pChannelIDParameter, pGaugeIDParameter, selectedDateParameter);
        }
    
        public virtual int DD_GetChannelsByUserIDForIndentsOLD(Nullable<long> userID, Nullable<long> irrigationLevelID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(long));
    
            var irrigationLevelIDParameter = irrigationLevelID.HasValue ?
                new ObjectParameter("IrrigationLevelID", irrigationLevelID) :
                new ObjectParameter("IrrigationLevelID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DD_GetChannelsByUserIDForIndentsOLD", userIDParameter, irrigationLevelIDParameter);
        }
    
        public virtual ObjectResult<DD_GetChannelsByUserIDForIndentss_Result> DD_GetChannelsByUserIDForIndentss(Nullable<long> userID, Nullable<long> irrigationLevelID, Nullable<long> subDivID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(long));
    
            var irrigationLevelIDParameter = irrigationLevelID.HasValue ?
                new ObjectParameter("IrrigationLevelID", irrigationLevelID) :
                new ObjectParameter("IrrigationLevelID", typeof(long));
    
            var subDivIDParameter = subDivID.HasValue ?
                new ObjectParameter("SubDivID", subDivID) :
                new ObjectParameter("SubDivID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DD_GetChannelsByUserIDForIndentss_Result>("DD_GetChannelsByUserIDForIndentss", userIDParameter, irrigationLevelIDParameter, subDivIDParameter);
        }
    
        public virtual int DD_GetChenabFirstBarrageData(Nullable<System.DateTime> readingDate)
        {
            var readingDateParameter = readingDate.HasValue ?
                new ObjectParameter("ReadingDate", readingDate) :
                new ObjectParameter("ReadingDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DD_GetChenabFirstBarrageData", readingDateParameter);
        }
    
        public virtual int DD_GetChenabOtherBarrageData(Nullable<System.DateTime> readingDate)
        {
            var readingDateParameter = readingDate.HasValue ?
                new ObjectParameter("ReadingDate", readingDate) :
                new ObjectParameter("ReadingDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DD_GetChenabOtherBarrageData", readingDateParameter);
        }
    
        public virtual int DD_GetIndusDamData(Nullable<System.DateTime> readingDate)
        {
            var readingDateParameter = readingDate.HasValue ?
                new ObjectParameter("ReadingDate", readingDate) :
                new ObjectParameter("ReadingDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DD_GetIndusDamData", readingDateParameter);
        }
    
        public virtual int DD_GetIndusPunjabBarrageData(Nullable<System.DateTime> readingDate)
        {
            var readingDateParameter = readingDate.HasValue ?
                new ObjectParameter("ReadingDate", readingDate) :
                new ObjectParameter("ReadingDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DD_GetIndusPunjabBarrageData", readingDateParameter);
        }
    
        public virtual int DD_GetIndusSindhBarrageData(Nullable<System.DateTime> readingDate)
        {
            var readingDateParameter = readingDate.HasValue ?
                new ObjectParameter("ReadingDate", readingDate) :
                new ObjectParameter("ReadingDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DD_GetIndusSindhBarrageData", readingDateParameter);
        }
    
        public virtual int DD_GetJhelumStructureData(Nullable<System.DateTime> readingDate)
        {
            var readingDateParameter = readingDate.HasValue ?
                new ObjectParameter("ReadingDate", readingDate) :
                new ObjectParameter("ReadingDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DD_GetJhelumStructureData", readingDateParameter);
        }
    
        public virtual int DD_GetRaviBarrageData(Nullable<System.DateTime> readingDate)
        {
            var readingDateParameter = readingDate.HasValue ?
                new ObjectParameter("ReadingDate", readingDate) :
                new ObjectParameter("ReadingDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DD_GetRaviBarrageData", readingDateParameter);
        }
    
        public virtual int DD_GetSutlejBarrageData(Nullable<System.DateTime> readingDate)
        {
            var readingDateParameter = readingDate.HasValue ?
                new ObjectParameter("ReadingDate", readingDate) :
                new ObjectParameter("ReadingDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DD_GetSutlejBarrageData", readingDateParameter);
        }
    
        public virtual ObjectResult<GetGaugeCurrentReading_Result> GetGaugeCurrentReading(Nullable<long> gaugeID, Nullable<System.DateTime> readingDate)
        {
            var gaugeIDParameter = gaugeID.HasValue ?
                new ObjectParameter("GaugeID", gaugeID) :
                new ObjectParameter("GaugeID", typeof(long));
    
            var readingDateParameter = readingDate.HasValue ?
                new ObjectParameter("ReadingDate", readingDate) :
                new ObjectParameter("ReadingDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetGaugeCurrentReading_Result>("GetGaugeCurrentReading", gaugeIDParameter, readingDateParameter);
        }
    
        public virtual ObjectResult<string> SP_GetPivotedProbabilityTable(Nullable<int> rimstationID, Nullable<int> seasonID, string year)
        {
            var rimstationIDParameter = rimstationID.HasValue ?
                new ObjectParameter("RimstationID", rimstationID) :
                new ObjectParameter("RimstationID", typeof(int));
    
            var seasonIDParameter = seasonID.HasValue ?
                new ObjectParameter("SeasonID", seasonID) :
                new ObjectParameter("SeasonID", typeof(int));
    
            var yearParameter = year != null ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SP_GetPivotedProbabilityTable", rimstationIDParameter, seasonIDParameter, yearParameter);
        }
    
        public virtual ObjectResult<tmp__GetModules_Result> tmp__GetModules()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tmp__GetModules_Result>("tmp__GetModules");
        }
    
        public virtual ObjectResult<string> tmp__GetMultipleDataSets(Nullable<System.DateTime> curDate)
        {
            var curDateParameter = curDate.HasValue ?
                new ObjectParameter("CurDate", curDate) :
                new ObjectParameter("CurDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("tmp__GetMultipleDataSets", curDateParameter);
        }
    
        public virtual int UA_GetNotificationRecievers(Nullable<long> eventID, Nullable<long> moduleID)
        {
            var eventIDParameter = eventID.HasValue ?
                new ObjectParameter("EventID", eventID) :
                new ObjectParameter("EventID", typeof(long));
    
            var moduleIDParameter = moduleID.HasValue ?
                new ObjectParameter("ModuleID", moduleID) :
                new ObjectParameter("ModuleID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UA_GetNotificationRecievers", eventIDParameter, moduleIDParameter);
        }
    
        public virtual ObjectResult<UA_SearchAlertNotification_Result> UA_SearchAlertNotification(Nullable<long> statusID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<long> userID)
        {
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(long));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UA_SearchAlertNotification_Result>("UA_SearchAlertNotification", statusIDParameter, fromDateParameter, toDateParameter, userIDParameter);
        }
    
        public virtual ObjectResult<WT_GetDateToFillPlaceHolder_Result> WT_GetDateToFillPlaceHolder(Nullable<long> waterTheftID)
        {
            var waterTheftIDParameter = waterTheftID.HasValue ?
                new ObjectParameter("WaterTheftID", waterTheftID) :
                new ObjectParameter("WaterTheftID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<WT_GetDateToFillPlaceHolder_Result>("WT_GetDateToFillPlaceHolder", waterTheftIDParameter);
        }
    
        public virtual ObjectResult<UA_GetNotificationsRecievers_Result> UA_GetNotificationsRecievers(Nullable<long> eventID, Nullable<long> userID)
        {
            var eventIDParameter = eventID.HasValue ?
                new ObjectParameter("EventID", eventID) :
                new ObjectParameter("EventID", typeof(long));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UA_GetNotificationsRecievers_Result>("UA_GetNotificationsRecievers", eventIDParameter, userIDParameter);
        }
    
        public virtual ObjectResult<WT_GetWaterTheftNotifyDTParameters_Result> WT_GetWaterTheftNotifyDTParameters(Nullable<long> waterTheftID)
        {
            var waterTheftIDParameter = waterTheftID.HasValue ?
                new ObjectParameter("WaterTheftID", waterTheftID) :
                new ObjectParameter("WaterTheftID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<WT_GetWaterTheftNotifyDTParameters_Result>("WT_GetWaterTheftNotifyDTParameters", waterTheftIDParameter);
        }
    
        public virtual ObjectResult<SP_GetPreviousSeasonMaf_Result> SP_GetPreviousSeasonMaf(Nullable<int> seasonId)
        {
            var seasonIdParameter = seasonId.HasValue ?
                new ObjectParameter("SeasonId", seasonId) :
                new ObjectParameter("SeasonId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetPreviousSeasonMaf_Result>("SP_GetPreviousSeasonMaf", seasonIdParameter);
        }
    
        public virtual ObjectResult<DD_GetPlaceDataDailyData_Result> DD_GetPlaceDataDailyData()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DD_GetPlaceDataDailyData_Result>("DD_GetPlaceDataDailyData");
        }
    
        public virtual ObjectResult<SP_GetMatchingYears_Result> SP_GetMatchingYears(Nullable<long> stationID)
        {
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("StationID", stationID) :
                new ObjectParameter("StationID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetMatchingYears_Result>("SP_GetMatchingYears", stationIDParameter);
        }
    
        public virtual ObjectResult<UA_GetUserNotificationPreferences_Result> UA_GetUserNotificationPreferences(Nullable<long> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UA_GetUserNotificationPreferences_Result>("UA_GetUserNotificationPreferences", userIDParameter);
        }
    
        public virtual ObjectResult<Nullable<short>> SP_GetProbabiltyForMatchingInflows(Nullable<decimal> comAverage, Nullable<int> stationID, Nullable<int> seasonId, Nullable<int> tDailyID)
        {
            var comAverageParameter = comAverage.HasValue ?
                new ObjectParameter("ComAverage", comAverage) :
                new ObjectParameter("ComAverage", typeof(decimal));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("StationID", stationID) :
                new ObjectParameter("StationID", typeof(int));
    
            var seasonIdParameter = seasonId.HasValue ?
                new ObjectParameter("SeasonId", seasonId) :
                new ObjectParameter("SeasonId", typeof(int));
    
            var tDailyIDParameter = tDailyID.HasValue ?
                new ObjectParameter("TDailyID", tDailyID) :
                new ObjectParameter("TDailyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<short>>("SP_GetProbabiltyForMatchingInflows", comAverageParameter, stationIDParameter, seasonIdParameter, tDailyIDParameter);
        }
    
        public virtual ObjectResult<SP_GetForecastedValues_Result> SP_GetForecastedValues(Nullable<int> seasonID, Nullable<int> jhelumAtMangla, Nullable<int> jhelumAtManglaLK, Nullable<int> chenabAtMarala, Nullable<int> chenabAtMaralaLK, Nullable<int> indusAtTarbela, Nullable<int> indusAtTarbelaLK, Nullable<int> kAbulAtNowshera, Nullable<int> kAbulAtNowsheraLK)
        {
            var seasonIDParameter = seasonID.HasValue ?
                new ObjectParameter("SeasonID", seasonID) :
                new ObjectParameter("SeasonID", typeof(int));
    
            var jhelumAtManglaParameter = jhelumAtMangla.HasValue ?
                new ObjectParameter("JhelumAtMangla", jhelumAtMangla) :
                new ObjectParameter("JhelumAtMangla", typeof(int));
    
            var jhelumAtManglaLKParameter = jhelumAtManglaLK.HasValue ?
                new ObjectParameter("JhelumAtManglaLK", jhelumAtManglaLK) :
                new ObjectParameter("JhelumAtManglaLK", typeof(int));
    
            var chenabAtMaralaParameter = chenabAtMarala.HasValue ?
                new ObjectParameter("ChenabAtMarala", chenabAtMarala) :
                new ObjectParameter("ChenabAtMarala", typeof(int));
    
            var chenabAtMaralaLKParameter = chenabAtMaralaLK.HasValue ?
                new ObjectParameter("ChenabAtMaralaLK", chenabAtMaralaLK) :
                new ObjectParameter("ChenabAtMaralaLK", typeof(int));
    
            var indusAtTarbelaParameter = indusAtTarbela.HasValue ?
                new ObjectParameter("IndusAtTarbela", indusAtTarbela) :
                new ObjectParameter("IndusAtTarbela", typeof(int));
    
            var indusAtTarbelaLKParameter = indusAtTarbelaLK.HasValue ?
                new ObjectParameter("IndusAtTarbelaLK", indusAtTarbelaLK) :
                new ObjectParameter("IndusAtTarbelaLK", typeof(int));
    
            var kAbulAtNowsheraParameter = kAbulAtNowshera.HasValue ?
                new ObjectParameter("KAbulAtNowshera", kAbulAtNowshera) :
                new ObjectParameter("KAbulAtNowshera", typeof(int));
    
            var kAbulAtNowsheraLKParameter = kAbulAtNowsheraLK.HasValue ?
                new ObjectParameter("KAbulAtNowsheraLK", kAbulAtNowsheraLK) :
                new ObjectParameter("KAbulAtNowsheraLK", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetForecastedValues_Result>("SP_GetForecastedValues", seasonIDParameter, jhelumAtManglaParameter, jhelumAtManglaLKParameter, chenabAtMaralaParameter, chenabAtMaralaLKParameter, indusAtTarbelaParameter, indusAtTarbelaLKParameter, kAbulAtNowsheraParameter, kAbulAtNowsheraLKParameter);
        }
    
        public virtual int CM_SaveBulkCommentsandAttachments()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CM_SaveBulkCommentsandAttachments");
        }
    
        public virtual ObjectResult<CM_SearchComplaint_Result> CM_SearchComplaint(Nullable<long> userID, string complaintNumber, string complainantName, string complainantCell, Nullable<long> domainID, Nullable<long> divisionID, Nullable<long> complaintSourceID, Nullable<long> statusID, Nullable<long> action, Nullable<long> complaintTypeID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<long> irrigationLevelID, Nullable<bool> isPMIU, Nullable<long> designationID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(long));
    
            var complaintNumberParameter = complaintNumber != null ?
                new ObjectParameter("ComplaintNumber", complaintNumber) :
                new ObjectParameter("ComplaintNumber", typeof(string));
    
            var complainantNameParameter = complainantName != null ?
                new ObjectParameter("ComplainantName", complainantName) :
                new ObjectParameter("ComplainantName", typeof(string));
    
            var complainantCellParameter = complainantCell != null ?
                new ObjectParameter("ComplainantCell", complainantCell) :
                new ObjectParameter("ComplainantCell", typeof(string));
    
            var domainIDParameter = domainID.HasValue ?
                new ObjectParameter("DomainID", domainID) :
                new ObjectParameter("DomainID", typeof(long));
    
            var divisionIDParameter = divisionID.HasValue ?
                new ObjectParameter("DivisionID", divisionID) :
                new ObjectParameter("DivisionID", typeof(long));
    
            var complaintSourceIDParameter = complaintSourceID.HasValue ?
                new ObjectParameter("ComplaintSourceID", complaintSourceID) :
                new ObjectParameter("ComplaintSourceID", typeof(long));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(long));
    
            var actionParameter = action.HasValue ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(long));
    
            var complaintTypeIDParameter = complaintTypeID.HasValue ?
                new ObjectParameter("ComplaintTypeID", complaintTypeID) :
                new ObjectParameter("ComplaintTypeID", typeof(long));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var irrigationLevelIDParameter = irrigationLevelID.HasValue ?
                new ObjectParameter("IrrigationLevelID", irrigationLevelID) :
                new ObjectParameter("IrrigationLevelID", typeof(long));
    
            var isPMIUParameter = isPMIU.HasValue ?
                new ObjectParameter("IsPMIU", isPMIU) :
                new ObjectParameter("IsPMIU", typeof(bool));
    
            var designationIDParameter = designationID.HasValue ?
                new ObjectParameter("DesignationID", designationID) :
                new ObjectParameter("DesignationID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CM_SearchComplaint_Result>("CM_SearchComplaint", userIDParameter, complaintNumberParameter, complainantNameParameter, complainantCellParameter, domainIDParameter, divisionIDParameter, complaintSourceIDParameter, statusIDParameter, actionParameter, complaintTypeIDParameter, fromDateParameter, toDateParameter, irrigationLevelIDParameter, isPMIUParameter, designationIDParameter);
        }
    
        public virtual ObjectResult<SI_GetOutletDetail_Result> SI_GetOutletDetail(Nullable<long> outletID)
        {
            var outletIDParameter = outletID.HasValue ?
                new ObjectParameter("OutletID", outletID) :
                new ObjectParameter("OutletID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SI_GetOutletDetail_Result>("SI_GetOutletDetail", outletIDParameter);
        }
    
        public virtual ObjectResult<SI_GetUserSchedule_Result> SI_GetUserSchedule(Nullable<long> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SI_GetUserSchedule_Result>("SI_GetUserSchedule", userIDParameter);
        }
    
        public virtual ObjectResult<SI_ScheduleTypes_Result> SI_ScheduleTypes(Nullable<long> scheduleID)
        {
            var scheduleIDParameter = scheduleID.HasValue ?
                new ObjectParameter("ScheduleID", scheduleID) :
                new ObjectParameter("ScheduleID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SI_ScheduleTypes_Result>("SI_ScheduleTypes", scheduleIDParameter);
        }
    
        public virtual ObjectResult<SI_GetGaugeInspectionAreas_Result> SI_GetGaugeInspectionAreas(Nullable<long> scheduleID, Nullable<long> inspectionTypeID)
        {
            var scheduleIDParameter = scheduleID.HasValue ?
                new ObjectParameter("ScheduleID", scheduleID) :
                new ObjectParameter("ScheduleID", typeof(long));
    
            var inspectionTypeIDParameter = inspectionTypeID.HasValue ?
                new ObjectParameter("InspectionTypeID", inspectionTypeID) :
                new ObjectParameter("InspectionTypeID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SI_GetGaugeInspectionAreas_Result>("SI_GetGaugeInspectionAreas", scheduleIDParameter, inspectionTypeIDParameter);
        }
    
        public virtual ObjectResult<SI_GetOutletInspectionAreas_Result> SI_GetOutletInspectionAreas(Nullable<long> scheduleID, Nullable<long> inspectionTypeID)
        {
            var scheduleIDParameter = scheduleID.HasValue ?
                new ObjectParameter("ScheduleID", scheduleID) :
                new ObjectParameter("ScheduleID", typeof(long));
    
            var inspectionTypeIDParameter = inspectionTypeID.HasValue ?
                new ObjectParameter("InspectionTypeID", inspectionTypeID) :
                new ObjectParameter("InspectionTypeID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SI_GetOutletInspectionAreas_Result>("SI_GetOutletInspectionAreas", scheduleIDParameter, inspectionTypeIDParameter);
        }
    
        public virtual int SP_UpdateElevationCapacity(Nullable<long> recordID, Nullable<decimal> capacity, Nullable<long> userID)
        {
            var recordIDParameter = recordID.HasValue ?
                new ObjectParameter("RecordID", recordID) :
                new ObjectParameter("RecordID", typeof(long));
    
            var capacityParameter = capacity.HasValue ?
                new ObjectParameter("Capacity", capacity) :
                new ObjectParameter("Capacity", typeof(decimal));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_UpdateElevationCapacity", recordIDParameter, capacityParameter, userIDParameter);
        }
    
        public virtual ObjectResult<FO_GetInfrastructureNamesByType_Result> FO_GetInfrastructureNamesByType(string infrastructureType)
        {
            var infrastructureTypeParameter = infrastructureType != null ?
                new ObjectParameter("InfrastructureType", infrastructureType) :
                new ObjectParameter("InfrastructureType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FO_GetInfrastructureNamesByType_Result>("FO_GetInfrastructureNamesByType", infrastructureTypeParameter);
        }
    
        public virtual ObjectResult<GetWaterLosses_ChannelWise_Result> GetWaterLosses_ChannelWise(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<long> chnlID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var chnlIDParameter = chnlID.HasValue ?
                new ObjectParameter("ChnlID", chnlID) :
                new ObjectParameter("ChnlID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetWaterLosses_ChannelWise_Result>("GetWaterLosses_ChannelWise", fromDateParameter, toDateParameter, chnlIDParameter);
        }
    
        public virtual ObjectResult<SP_GetParaKPKBalochistanMAF_Result> SP_GetParaKPKBalochistanMAF(Nullable<long> seasonID)
        {
            var seasonIDParameter = seasonID.HasValue ?
                new ObjectParameter("SeasonID", seasonID) :
                new ObjectParameter("SeasonID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetParaKPKBalochistanMAF_Result>("SP_GetParaKPKBalochistanMAF", seasonIDParameter);
        }
    
        public virtual ObjectResult<Nullable<double>> SP_GetParaMAFForIndus(Nullable<long> seasonID)
        {
            var seasonIDParameter = seasonID.HasValue ?
                new ObjectParameter("SeasonID", seasonID) :
                new ObjectParameter("SeasonID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<double>>("SP_GetParaMAFForIndus", seasonIDParameter);
        }
    
        public virtual int FO_GetFloodInspectionsByID(string infrastructureType, Nullable<int> iD)
        {
            var infrastructureTypeParameter = infrastructureType != null ?
                new ObjectParameter("InfrastructureType", infrastructureType) :
                new ObjectParameter("InfrastructureType", typeof(string));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FO_GetFloodInspectionsByID", infrastructureTypeParameter, iDParameter);
        }
    
        public virtual ObjectResult<FO_SearchIndependentInspection_Result> FO_SearchIndependentInspection(string infrastructureType, Nullable<long> floodInspectionID, Nullable<long> zoneID, Nullable<long> circleID, Nullable<long> divisionID, Nullable<int> inspectionType, Nullable<int> status, string infrastructureName, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> userID)
        {
            var infrastructureTypeParameter = infrastructureType != null ?
                new ObjectParameter("InfrastructureType", infrastructureType) :
                new ObjectParameter("InfrastructureType", typeof(string));
    
            var floodInspectionIDParameter = floodInspectionID.HasValue ?
                new ObjectParameter("FloodInspectionID", floodInspectionID) :
                new ObjectParameter("FloodInspectionID", typeof(long));
    
            var zoneIDParameter = zoneID.HasValue ?
                new ObjectParameter("ZoneID", zoneID) :
                new ObjectParameter("ZoneID", typeof(long));
    
            var circleIDParameter = circleID.HasValue ?
                new ObjectParameter("CircleID", circleID) :
                new ObjectParameter("CircleID", typeof(long));
    
            var divisionIDParameter = divisionID.HasValue ?
                new ObjectParameter("DivisionID", divisionID) :
                new ObjectParameter("DivisionID", typeof(long));
    
            var inspectionTypeParameter = inspectionType.HasValue ?
                new ObjectParameter("InspectionType", inspectionType) :
                new ObjectParameter("InspectionType", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var infrastructureNameParameter = infrastructureName != null ?
                new ObjectParameter("InfrastructureName", infrastructureName) :
                new ObjectParameter("InfrastructureName", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FO_SearchIndependentInspection_Result>("FO_SearchIndependentInspection", infrastructureTypeParameter, floodInspectionIDParameter, zoneIDParameter, circleIDParameter, divisionIDParameter, inspectionTypeParameter, statusParameter, infrastructureNameParameter, fromDateParameter, toDateParameter, userIDParameter);
        }
    
        public virtual ObjectResult<Nullable<double>> SPGetEasternComponentDataEKSum(Nullable<short> sEASON, Nullable<short> years)
        {
            var sEASONParameter = sEASON.HasValue ?
                new ObjectParameter("SEASON", sEASON) :
                new ObjectParameter("SEASON", typeof(short));
    
            var yearsParameter = years.HasValue ?
                new ObjectParameter("Years", years) :
                new ObjectParameter("Years", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<double>>("SPGetEasternComponentDataEKSum", sEASONParameter, yearsParameter);
        }
    
        public virtual ObjectResult<Nullable<double>> SPGetEasternComponentDataLKSum(Nullable<short> sEASON, Nullable<short> years)
        {
            var sEASONParameter = sEASON.HasValue ?
                new ObjectParameter("SEASON", sEASON) :
                new ObjectParameter("SEASON", typeof(short));
    
            var yearsParameter = years.HasValue ?
                new ObjectParameter("Years", years) :
                new ObjectParameter("Years", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<double>>("SPGetEasternComponentDataLKSum", sEASONParameter, yearsParameter);
        }
    
        public virtual ObjectResult<SPGetEasternComponentTDailies_Result> SPGetEasternComponentTDailies(Nullable<short> sEASON, Nullable<short> years)
        {
            var sEASONParameter = sEASON.HasValue ?
                new ObjectParameter("SEASON", sEASON) :
                new ObjectParameter("SEASON", typeof(short));
    
            var yearsParameter = years.HasValue ?
                new ObjectParameter("Years", years) :
                new ObjectParameter("Years", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPGetEasternComponentTDailies_Result>("SPGetEasternComponentTDailies", sEASONParameter, yearsParameter);
        }
    
        public virtual ObjectResult<Nullable<double>> SPGetEasternComponentTDailiesSUM(Nullable<short> sEASON, Nullable<short> years)
        {
            var sEASONParameter = sEASON.HasValue ?
                new ObjectParameter("SEASON", sEASON) :
                new ObjectParameter("SEASON", typeof(short));
    
            var yearsParameter = years.HasValue ?
                new ObjectParameter("Years", years) :
                new ObjectParameter("Years", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<double>>("SPGetEasternComponentTDailiesSUM", sEASONParameter, yearsParameter);
        }
    
        public virtual ObjectResult<CM_GetComplaintsNotifyParameters_Result> CM_GetComplaintsNotifyParameters(Nullable<long> complaintID)
        {
            var complaintIDParameter = complaintID.HasValue ?
                new ObjectParameter("ComplaintID", complaintID) :
                new ObjectParameter("ComplaintID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CM_GetComplaintsNotifyParameters_Result>("CM_GetComplaintsNotifyParameters", complaintIDParameter);
        }
    
        public virtual ObjectResult<Nullable<bool>> SI_IsSchedeleInspectionsExists(Nullable<long> scheduleID)
        {
            var scheduleIDParameter = scheduleID.HasValue ?
                new ObjectParameter("ScheduleID", scheduleID) :
                new ObjectParameter("ScheduleID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("SI_IsSchedeleInspectionsExists", scheduleIDParameter);
        }
    
        public virtual ObjectResult<Nullable<long>> SI_InsertBasicScheduleInformation(string schName, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string description, Nullable<int> userID, Nullable<int> userDesignationID, Nullable<System.DateTime> dateTime)
        {
            var schNameParameter = schName != null ?
                new ObjectParameter("SchName", schName) :
                new ObjectParameter("SchName", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var userDesignationIDParameter = userDesignationID.HasValue ?
                new ObjectParameter("UserDesignationID", userDesignationID) :
                new ObjectParameter("UserDesignationID", typeof(int));
    
            var dateTimeParameter = dateTime.HasValue ?
                new ObjectParameter("DateTime", dateTime) :
                new ObjectParameter("DateTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("SI_InsertBasicScheduleInformation", schNameParameter, fromDateParameter, toDateParameter, descriptionParameter, userIDParameter, userDesignationIDParameter, dateTimeParameter);
        }
    
        public virtual ObjectResult<SI_GetScheduleInspectionNotifyData_Result> SI_GetScheduleInspectionNotifyData(Nullable<long> scheduleID)
        {
            var scheduleIDParameter = scheduleID.HasValue ?
                new ObjectParameter("ScheduleID", scheduleID) :
                new ObjectParameter("ScheduleID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SI_GetScheduleInspectionNotifyData_Result>("SI_GetScheduleInspectionNotifyData", scheduleIDParameter);
        }
    
        public virtual ObjectResult<SI_GetScheduleInspectionNotifyReciever_Result> SI_GetScheduleInspectionNotifyReciever(Nullable<long> scheduleID, Nullable<long> eventID)
        {
            var scheduleIDParameter = scheduleID.HasValue ?
                new ObjectParameter("ScheduleID", scheduleID) :
                new ObjectParameter("ScheduleID", typeof(long));
    
            var eventIDParameter = eventID.HasValue ?
                new ObjectParameter("EventID", eventID) :
                new ObjectParameter("EventID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SI_GetScheduleInspectionNotifyReciever_Result>("SI_GetScheduleInspectionNotifyReciever", scheduleIDParameter, eventIDParameter);
        }
    
        [DbFunction("WRMIS_Entities", "GetSubDivDeliveredTo")]
        public virtual IQueryable<GetSubDivDeliveredTo_Result> GetSubDivDeliveredTo(Nullable<long> subDivID, Nullable<long> gaugeID, Nullable<int> year, Nullable<int> from, Nullable<int> to)
        {
            var subDivIDParameter = subDivID.HasValue ?
                new ObjectParameter("SubDivID", subDivID) :
                new ObjectParameter("SubDivID", typeof(long));
    
            var gaugeIDParameter = gaugeID.HasValue ?
                new ObjectParameter("GaugeID", gaugeID) :
                new ObjectParameter("GaugeID", typeof(long));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            var fromParameter = from.HasValue ?
                new ObjectParameter("From", from) :
                new ObjectParameter("From", typeof(int));
    
            var toParameter = to.HasValue ?
                new ObjectParameter("To", to) :
                new ObjectParameter("To", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetSubDivDeliveredTo_Result>("[WRMIS_Entities].[GetSubDivDeliveredTo](@SubDivID, @GaugeID, @Year, @From, @To)", subDivIDParameter, gaugeIDParameter, yearParameter, fromParameter, toParameter);
        }
    
        public virtual ObjectResult<CM_SearchForPublicWebSite_Result> CM_SearchForPublicWebSite(string complaintNumber, string mobilePhone)
        {
            var complaintNumberParameter = complaintNumber != null ?
                new ObjectParameter("ComplaintNumber", complaintNumber) :
                new ObjectParameter("ComplaintNumber", typeof(string));
    
            var mobilePhoneParameter = mobilePhone != null ?
                new ObjectParameter("MobilePhone", mobilePhone) :
                new ObjectParameter("MobilePhone", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CM_SearchForPublicWebSite_Result>("CM_SearchForPublicWebSite", complaintNumberParameter, mobilePhoneParameter);
        }
    
        public virtual ObjectResult<CO_Channel_SearchForPublicWebSite_Result> CO_Channel_SearchForPublicWebSite(Nullable<long> divisionID, string channelName)
        {
            var divisionIDParameter = divisionID.HasValue ?
                new ObjectParameter("DivisionID", divisionID) :
                new ObjectParameter("DivisionID", typeof(long));
    
            var channelNameParameter = channelName != null ?
                new ObjectParameter("ChannelName", channelName) :
                new ObjectParameter("ChannelName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CO_Channel_SearchForPublicWebSite_Result>("CO_Channel_SearchForPublicWebSite", divisionIDParameter, channelNameParameter);
        }
    
        public virtual ObjectResult<CO_Divisions_GetListForPublicWebSite_Result> CO_Divisions_GetListForPublicWebSite()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CO_Divisions_GetListForPublicWebSite_Result>("CO_Divisions_GetListForPublicWebSite");
        }
    
        public virtual int CO_Channel_DetailByIDForPublicWebSite(Nullable<long> channelID, Nullable<System.DateTime> readingDateTime)
        {
            var channelIDParameter = channelID.HasValue ?
                new ObjectParameter("ChannelID", channelID) :
                new ObjectParameter("ChannelID", typeof(long));
    
            var readingDateTimeParameter = readingDateTime.HasValue ?
                new ObjectParameter("ReadingDateTime", readingDateTime) :
                new ObjectParameter("ReadingDateTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CO_Channel_DetailByIDForPublicWebSite", channelIDParameter, readingDateTimeParameter);
        }
    
        [DbFunction("WRMIS_Entities", "WL_GetDivisionalLGData")]
        public virtual IQueryable<WL_GetDivisionalLGData_Result> WL_GetDivisionalLGData(Nullable<long> divID, Nullable<int> searchType, string fromDate, string toDate, Nullable<int> year, Nullable<int> from, Nullable<int> to)
        {
            var divIDParameter = divID.HasValue ?
                new ObjectParameter("DivID", divID) :
                new ObjectParameter("DivID", typeof(long));
    
            var searchTypeParameter = searchType.HasValue ?
                new ObjectParameter("SearchType", searchType) :
                new ObjectParameter("SearchType", typeof(int));
    
            var fromDateParameter = fromDate != null ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(string));
    
            var toDateParameter = toDate != null ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(string));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            var fromParameter = from.HasValue ?
                new ObjectParameter("From", from) :
                new ObjectParameter("From", typeof(int));
    
            var toParameter = to.HasValue ?
                new ObjectParameter("To", to) :
                new ObjectParameter("To", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<WL_GetDivisionalLGData_Result>("[WRMIS_Entities].[WL_GetDivisionalLGData](@DivID, @SearchType, @FromDate, @ToDate, @Year, @From, @To)", divIDParameter, searchTypeParameter, fromDateParameter, toDateParameter, yearParameter, fromParameter, toParameter);
        }
    
        public virtual ObjectResult<SP_GetSelectedFinalForecast_Result> SP_GetSelectedFinalForecast(Nullable<int> jhelumID, Nullable<int> chenabID, Nullable<int> indusID, Nullable<int> kabulID, string scenario)
        {
            var jhelumIDParameter = jhelumID.HasValue ?
                new ObjectParameter("JhelumID", jhelumID) :
                new ObjectParameter("JhelumID", typeof(int));
    
            var chenabIDParameter = chenabID.HasValue ?
                new ObjectParameter("ChenabID", chenabID) :
                new ObjectParameter("ChenabID", typeof(int));
    
            var indusIDParameter = indusID.HasValue ?
                new ObjectParameter("IndusID", indusID) :
                new ObjectParameter("IndusID", typeof(int));
    
            var kabulIDParameter = kabulID.HasValue ?
                new ObjectParameter("KabulID", kabulID) :
                new ObjectParameter("KabulID", typeof(int));
    
            var scenarioParameter = scenario != null ?
                new ObjectParameter("Scenario", scenario) :
                new ObjectParameter("Scenario", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetSelectedFinalForecast_Result>("SP_GetSelectedFinalForecast", jhelumIDParameter, chenabIDParameter, indusIDParameter, kabulIDParameter, scenarioParameter);
        }
    
        public virtual ObjectResult<GetUserGauges_Result> GetUserGauges(Nullable<long> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUserGauges_Result>("GetUserGauges", userIDParameter);
        }
    
        public virtual ObjectResult<GetUserGaugesofStation_Result> GetUserGaugesofStation(Nullable<long> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUserGaugesofStation_Result>("GetUserGaugesofStation", userIDParameter);
        }
    
        public virtual ObjectResult<GetGauges_Result> GetGauges(Nullable<long> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetGauges_Result>("GetGauges", userIDParameter);
        }
    
        [DbFunction("WRMIS_Entities", "GetSubDivisionalWL")]
        public virtual IQueryable<GetSubDivisionalWL_Result> GetSubDivisionalWL(Nullable<long> subDivID, Nullable<int> year, Nullable<int> from, Nullable<int> to)
        {
            var subDivIDParameter = subDivID.HasValue ?
                new ObjectParameter("SubDivID", subDivID) :
                new ObjectParameter("SubDivID", typeof(long));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            var fromParameter = from.HasValue ?
                new ObjectParameter("From", from) :
                new ObjectParameter("From", typeof(int));
    
            var toParameter = to.HasValue ?
                new ObjectParameter("To", to) :
                new ObjectParameter("To", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetSubDivisionalWL_Result>("[WRMIS_Entities].[GetSubDivisionalWL](@SubDivID, @Year, @From, @To)", subDivIDParameter, yearParameter, fromParameter, toParameter);
        }
    
        public virtual ObjectResult<SI_GetOutletInspection_Result> SI_GetOutletInspection(Nullable<long> scheduledDetailID, Nullable<long> inspectionTypeID)
        {
            var scheduledDetailIDParameter = scheduledDetailID.HasValue ?
                new ObjectParameter("ScheduledDetailID", scheduledDetailID) :
                new ObjectParameter("ScheduledDetailID", typeof(long));
    
            var inspectionTypeIDParameter = inspectionTypeID.HasValue ?
                new ObjectParameter("InspectionTypeID", inspectionTypeID) :
                new ObjectParameter("InspectionTypeID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SI_GetOutletInspection_Result>("SI_GetOutletInspection", scheduledDetailIDParameter, inspectionTypeIDParameter);
        }
    
        public virtual ObjectResult<FO_SearchEmergencyPurchases_Result> FO_SearchEmergencyPurchases(string infrastructureType, Nullable<long> emergencyPurchasesID, Nullable<long> zoneID, Nullable<long> circleID, Nullable<long> divisionID, Nullable<int> purchasesYear, Nullable<bool> compSite)
        {
            var infrastructureTypeParameter = infrastructureType != null ?
                new ObjectParameter("InfrastructureType", infrastructureType) :
                new ObjectParameter("InfrastructureType", typeof(string));
    
            var emergencyPurchasesIDParameter = emergencyPurchasesID.HasValue ?
                new ObjectParameter("EmergencyPurchasesID", emergencyPurchasesID) :
                new ObjectParameter("EmergencyPurchasesID", typeof(long));
    
            var zoneIDParameter = zoneID.HasValue ?
                new ObjectParameter("ZoneID", zoneID) :
                new ObjectParameter("ZoneID", typeof(long));
    
            var circleIDParameter = circleID.HasValue ?
                new ObjectParameter("CircleID", circleID) :
                new ObjectParameter("CircleID", typeof(long));
    
            var divisionIDParameter = divisionID.HasValue ?
                new ObjectParameter("DivisionID", divisionID) :
                new ObjectParameter("DivisionID", typeof(long));
    
            var purchasesYearParameter = purchasesYear.HasValue ?
                new ObjectParameter("PurchasesYear", purchasesYear) :
                new ObjectParameter("PurchasesYear", typeof(int));
    
            var compSiteParameter = compSite.HasValue ?
                new ObjectParameter("CompSite", compSite) :
                new ObjectParameter("CompSite", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FO_SearchEmergencyPurchases_Result>("FO_SearchEmergencyPurchases", infrastructureTypeParameter, emergencyPurchasesIDParameter, zoneIDParameter, circleIDParameter, divisionIDParameter, purchasesYearParameter, compSiteParameter);
        }
    
        public virtual ObjectResult<Proc_FO_FFPSearch_Result> Proc_FO_FFPSearch(Nullable<long> fFPID, Nullable<long> zoneID, Nullable<long> circleID, Nullable<long> divisionID, Nullable<int> year, string status)
        {
            var fFPIDParameter = fFPID.HasValue ?
                new ObjectParameter("FFPID", fFPID) :
                new ObjectParameter("FFPID", typeof(long));
    
            var zoneIDParameter = zoneID.HasValue ?
                new ObjectParameter("ZoneID", zoneID) :
                new ObjectParameter("ZoneID", typeof(long));
    
            var circleIDParameter = circleID.HasValue ?
                new ObjectParameter("CircleID", circleID) :
                new ObjectParameter("CircleID", typeof(long));
    
            var divisionIDParameter = divisionID.HasValue ?
                new ObjectParameter("DivisionID", divisionID) :
                new ObjectParameter("DivisionID", typeof(long));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_FO_FFPSearch_Result>("Proc_FO_FFPSearch", fFPIDParameter, zoneIDParameter, circleIDParameter, divisionIDParameter, yearParameter, statusParameter);
        }
    
        public virtual ObjectResult<TM_SaveBulkDataOfCommitteeMembers_Result> TM_SaveBulkDataOfCommitteeMembers(string p_CommitteeMembers)
        {
            var p_CommitteeMembersParameter = p_CommitteeMembers != null ?
                new ObjectParameter("p_CommitteeMembers", p_CommitteeMembers) :
                new ObjectParameter("p_CommitteeMembers", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TM_SaveBulkDataOfCommitteeMembers_Result>("TM_SaveBulkDataOfCommitteeMembers", p_CommitteeMembersParameter);
        }
    
        public virtual int TM_GetComparativeStatementData(string tenderWorksID)
        {
            var tenderWorksIDParameter = tenderWorksID != null ?
                new ObjectParameter("TenderWorksID", tenderWorksID) :
                new ObjectParameter("TenderWorksID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TM_GetComparativeStatementData", tenderWorksIDParameter);
        }
    
        public virtual ObjectResult<CW_GetClosureOperationsNotifyReciever_Result> CW_GetClosureOperationsNotifyReciever(Nullable<long> cWPID, Nullable<long> eventID)
        {
            var cWPIDParameter = cWPID.HasValue ?
                new ObjectParameter("CWPID", cWPID) :
                new ObjectParameter("CWPID", typeof(long));
    
            var eventIDParameter = eventID.HasValue ?
                new ObjectParameter("EventID", eventID) :
                new ObjectParameter("EventID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CW_GetClosureOperationsNotifyReciever_Result>("CW_GetClosureOperationsNotifyReciever", cWPIDParameter, eventIDParameter);
        }
    
        public virtual ObjectResult<CW_GetCWPPublishNotifyData_Result> CW_GetCWPPublishNotifyData(Nullable<long> cWPID)
        {
            var cWPIDParameter = cWPID.HasValue ?
                new ObjectParameter("CWPID", cWPID) :
                new ObjectParameter("CWPID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CW_GetCWPPublishNotifyData_Result>("CW_GetCWPPublishNotifyData", cWPIDParameter);
        }
    
        public virtual ObjectResult<CW_GetCWProgressNotifyData_Result> CW_GetCWProgressNotifyData(Nullable<long> progressID)
        {
            var progressIDParameter = progressID.HasValue ?
                new ObjectParameter("ProgressID", progressID) :
                new ObjectParameter("ProgressID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CW_GetCWProgressNotifyData_Result>("CW_GetCWProgressNotifyData", progressIDParameter);
        }
    
        public virtual ObjectResult<RPT_SP_DistributionKharif_Result> RPT_SP_DistributionKharif(Nullable<int> year, Nullable<int> scenarioID)
        {
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            var scenarioIDParameter = scenarioID.HasValue ?
                new ObjectParameter("ScenarioID", scenarioID) :
                new ObjectParameter("ScenarioID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RPT_SP_DistributionKharif_Result>("RPT_SP_DistributionKharif", yearParameter, scenarioIDParameter);
        }
    
        public virtual ObjectResult<RPT_SP_DistributionRabi_Result> RPT_SP_DistributionRabi(Nullable<int> year, Nullable<int> scenarioID)
        {
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            var scenarioIDParameter = scenarioID.HasValue ?
                new ObjectParameter("ScenarioID", scenarioID) :
                new ObjectParameter("ScenarioID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RPT_SP_DistributionRabi_Result>("RPT_SP_DistributionRabi", yearParameter, scenarioIDParameter);
        }
    
        public virtual int RPT_GetTailStatuse()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RPT_GetTailStatuse");
        }
    
        public virtual ObjectResult<TM_GetTenderMonitoringUsersList_Result> TM_GetTenderMonitoringUsersList(Nullable<long> tenderID)
        {
            var tenderIDParameter = tenderID.HasValue ?
                new ObjectParameter("TenderID", tenderID) :
                new ObjectParameter("TenderID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TM_GetTenderMonitoringUsersList_Result>("TM_GetTenderMonitoringUsersList", tenderIDParameter);
        }
    
        public virtual ObjectResult<RPT_GetComplaintStatus_Result> RPT_GetComplaintStatus(Nullable<long> zoneID, Nullable<long> circleID, Nullable<long> divisionID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var zoneIDParameter = zoneID.HasValue ?
                new ObjectParameter("ZoneID", zoneID) :
                new ObjectParameter("ZoneID", typeof(long));
    
            var circleIDParameter = circleID.HasValue ?
                new ObjectParameter("CircleID", circleID) :
                new ObjectParameter("CircleID", typeof(long));
    
            var divisionIDParameter = divisionID.HasValue ?
                new ObjectParameter("DivisionID", divisionID) :
                new ObjectParameter("DivisionID", typeof(long));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RPT_GetComplaintStatus_Result>("RPT_GetComplaintStatus", zoneIDParameter, circleIDParameter, divisionIDParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<RPT_GetPerformanceEvaluation_Result> RPT_GetPerformanceEvaluation(Nullable<long> zoneID, Nullable<long> circleID, Nullable<long> divisionID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string session)
        {
            var zoneIDParameter = zoneID.HasValue ?
                new ObjectParameter("ZoneID", zoneID) :
                new ObjectParameter("ZoneID", typeof(long));
    
            var circleIDParameter = circleID.HasValue ?
                new ObjectParameter("CircleID", circleID) :
                new ObjectParameter("CircleID", typeof(long));
    
            var divisionIDParameter = divisionID.HasValue ?
                new ObjectParameter("DivisionID", divisionID) :
                new ObjectParameter("DivisionID", typeof(long));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var sessionParameter = session != null ?
                new ObjectParameter("Session", session) :
                new ObjectParameter("Session", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RPT_GetPerformanceEvaluation_Result>("RPT_GetPerformanceEvaluation", zoneIDParameter, circleIDParameter, divisionIDParameter, fromDateParameter, toDateParameter, sessionParameter);
        }
    
        public virtual ObjectResult<RPT_GetTailStatusFieldStaff_Result> RPT_GetTailStatusFieldStaff(Nullable<long> zoneID, Nullable<long> circleID, Nullable<long> divisionID, Nullable<System.DateTime> toDate)
        {
            var zoneIDParameter = zoneID.HasValue ?
                new ObjectParameter("ZoneID", zoneID) :
                new ObjectParameter("ZoneID", typeof(long));
    
            var circleIDParameter = circleID.HasValue ?
                new ObjectParameter("CircleID", circleID) :
                new ObjectParameter("CircleID", typeof(long));
    
            var divisionIDParameter = divisionID.HasValue ?
                new ObjectParameter("DivisionID", divisionID) :
                new ObjectParameter("DivisionID", typeof(long));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RPT_GetTailStatusFieldStaff_Result>("RPT_GetTailStatusFieldStaff", zoneIDParameter, circleIDParameter, divisionIDParameter, toDateParameter);
        }
    
        public virtual ObjectResult<RPT_GetTailStatusPMIUStaff_Result> RPT_GetTailStatusPMIUStaff(Nullable<long> zoneID, Nullable<long> circleID, Nullable<long> divisionID, Nullable<System.DateTime> toDate)
        {
            var zoneIDParameter = zoneID.HasValue ?
                new ObjectParameter("ZoneID", zoneID) :
                new ObjectParameter("ZoneID", typeof(long));
    
            var circleIDParameter = circleID.HasValue ?
                new ObjectParameter("CircleID", circleID) :
                new ObjectParameter("CircleID", typeof(long));
    
            var divisionIDParameter = divisionID.HasValue ?
                new ObjectParameter("DivisionID", divisionID) :
                new ObjectParameter("DivisionID", typeof(long));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RPT_GetTailStatusPMIUStaff_Result>("RPT_GetTailStatusPMIUStaff", zoneIDParameter, circleIDParameter, divisionIDParameter, toDateParameter);
        }
    
        public virtual ObjectResult<RPT_GetWaterTheftStatuses_Result> RPT_GetWaterTheftStatuses(Nullable<long> zoneID, Nullable<long> circleID, Nullable<long> divisionID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var zoneIDParameter = zoneID.HasValue ?
                new ObjectParameter("ZoneID", zoneID) :
                new ObjectParameter("ZoneID", typeof(long));
    
            var circleIDParameter = circleID.HasValue ?
                new ObjectParameter("CircleID", circleID) :
                new ObjectParameter("CircleID", typeof(long));
    
            var divisionIDParameter = divisionID.HasValue ?
                new ObjectParameter("DivisionID", divisionID) :
                new ObjectParameter("DivisionID", typeof(long));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RPT_GetWaterTheftStatuses_Result>("RPT_GetWaterTheftStatuses", zoneIDParameter, circleIDParameter, divisionIDParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<FO_GetFloodInspectionsDetailByID_Result2> FO_GetFloodInspectionsDetailByID(string infrastructureType, Nullable<long> iD)
        {
            var infrastructureTypeParameter = infrastructureType != null ?
                new ObjectParameter("InfrastructureType", infrastructureType) :
                new ObjectParameter("InfrastructureType", typeof(string));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FO_GetFloodInspectionsDetailByID_Result2>("FO_GetFloodInspectionsDetailByID", infrastructureTypeParameter, iDParameter);
        }
    
        public virtual ObjectResult<FO_InfrastructureForDivisionSummary_Result> FO_InfrastructureForDivisionSummary(Nullable<long> divisionID)
        {
            var divisionIDParameter = divisionID.HasValue ?
                new ObjectParameter("DivisionID", divisionID) :
                new ObjectParameter("DivisionID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FO_InfrastructureForDivisionSummary_Result>("FO_InfrastructureForDivisionSummary", divisionIDParameter);
        }
    
        public virtual ObjectResult<Nullable<System.DateTime>> RPT_GetTailStatusFieldLatestReadingDate(Nullable<long> zoneID, Nullable<long> circleID, Nullable<long> divisionID)
        {
            var zoneIDParameter = zoneID.HasValue ?
                new ObjectParameter("ZoneID", zoneID) :
                new ObjectParameter("ZoneID", typeof(long));
    
            var circleIDParameter = circleID.HasValue ?
                new ObjectParameter("CircleID", circleID) :
                new ObjectParameter("CircleID", typeof(long));
    
            var divisionIDParameter = divisionID.HasValue ?
                new ObjectParameter("DivisionID", divisionID) :
                new ObjectParameter("DivisionID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<System.DateTime>>("RPT_GetTailStatusFieldLatestReadingDate", zoneIDParameter, circleIDParameter, divisionIDParameter);
        }
    
        public virtual ObjectResult<Nullable<System.DateTime>> RPT_GetTailStatusPMIULatestReadingDate(Nullable<long> zoneID, Nullable<long> circleID, Nullable<long> divisionID)
        {
            var zoneIDParameter = zoneID.HasValue ?
                new ObjectParameter("ZoneID", zoneID) :
                new ObjectParameter("ZoneID", typeof(long));
    
            var circleIDParameter = circleID.HasValue ?
                new ObjectParameter("CircleID", circleID) :
                new ObjectParameter("CircleID", typeof(long));
    
            var divisionIDParameter = divisionID.HasValue ?
                new ObjectParameter("DivisionID", divisionID) :
                new ObjectParameter("DivisionID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<System.DateTime>>("RPT_GetTailStatusPMIULatestReadingDate", zoneIDParameter, circleIDParameter, divisionIDParameter);
        }
    
        public virtual ObjectResult<DD_GetDailyDataNotifyRecievers_Result> DD_GetDailyDataNotifyRecievers(Nullable<long> eventID, Nullable<long> dailyGaugeReadingID)
        {
            var eventIDParameter = eventID.HasValue ?
                new ObjectParameter("EventID", eventID) :
                new ObjectParameter("EventID", typeof(long));
    
            var dailyGaugeReadingIDParameter = dailyGaugeReadingID.HasValue ?
                new ObjectParameter("DailyGaugeReadingID", dailyGaugeReadingID) :
                new ObjectParameter("DailyGaugeReadingID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DD_GetDailyDataNotifyRecievers_Result>("DD_GetDailyDataNotifyRecievers", eventIDParameter, dailyGaugeReadingIDParameter);
        }
    
        public virtual ObjectResult<DD_GetDailyGaugeReadingNotifyData_Result> DD_GetDailyGaugeReadingNotifyData(Nullable<long> dailyGaugeReadingID)
        {
            var dailyGaugeReadingIDParameter = dailyGaugeReadingID.HasValue ?
                new ObjectParameter("DailyGaugeReadingID", dailyGaugeReadingID) :
                new ObjectParameter("DailyGaugeReadingID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DD_GetDailyGaugeReadingNotifyData_Result>("DD_GetDailyGaugeReadingNotifyData", dailyGaugeReadingIDParameter);
        }
    
        public virtual ObjectResult<UA_GetIrrigationNetworkNotificationRecievers_Result> UA_GetIrrigationNetworkNotificationRecievers(Nullable<long> eventID, Nullable<long> gaugeID)
        {
            var eventIDParameter = eventID.HasValue ?
                new ObjectParameter("EventID", eventID) :
                new ObjectParameter("EventID", typeof(long));
    
            var gaugeIDParameter = gaugeID.HasValue ?
                new ObjectParameter("GaugeID", gaugeID) :
                new ObjectParameter("GaugeID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UA_GetIrrigationNetworkNotificationRecievers_Result>("UA_GetIrrigationNetworkNotificationRecievers", eventIDParameter, gaugeIDParameter);
        }
    
        public virtual ObjectResult<UA_GetCrestBedLevelNotifyDTParameters_Result> UA_GetCrestBedLevelNotifyDTParameters(Nullable<long> gaugeID, Nullable<bool> isCrestParameters)
        {
            var gaugeIDParameter = gaugeID.HasValue ?
                new ObjectParameter("GaugeID", gaugeID) :
                new ObjectParameter("GaugeID", typeof(long));
    
            var isCrestParametersParameter = isCrestParameters.HasValue ?
                new ObjectParameter("IsCrestParameters", isCrestParameters) :
                new ObjectParameter("IsCrestParameters", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UA_GetCrestBedLevelNotifyDTParameters_Result>("UA_GetCrestBedLevelNotifyDTParameters", gaugeIDParameter, isCrestParametersParameter);
        }
    
        public virtual ObjectResult<DD_GetGaugesBulkEntry_Result> DD_GetGaugesBulkEntry(Nullable<long> subDivisionID, Nullable<long> sectionID, Nullable<int> session, Nullable<System.DateTime> readingDate)
        {
            var subDivisionIDParameter = subDivisionID.HasValue ?
                new ObjectParameter("SubDivisionID", subDivisionID) :
                new ObjectParameter("SubDivisionID", typeof(long));
    
            var sectionIDParameter = sectionID.HasValue ?
                new ObjectParameter("SectionID", sectionID) :
                new ObjectParameter("SectionID", typeof(long));
    
            var sessionParameter = session.HasValue ?
                new ObjectParameter("Session", session) :
                new ObjectParameter("Session", typeof(int));
    
            var readingDateParameter = readingDate.HasValue ?
                new ObjectParameter("ReadingDate", readingDate) :
                new ObjectParameter("ReadingDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DD_GetGaugesBulkEntry_Result>("DD_GetGaugesBulkEntry", subDivisionIDParameter, sectionIDParameter, sessionParameter, readingDateParameter);
        }
    
        public virtual ObjectResult<DD_GetDailyIndentNotifyData_Result> DD_GetDailyIndentNotifyData(Nullable<long> gaugeID)
        {
            var gaugeIDParameter = gaugeID.HasValue ?
                new ObjectParameter("GaugeID", gaugeID) :
                new ObjectParameter("GaugeID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DD_GetDailyIndentNotifyData_Result>("DD_GetDailyIndentNotifyData", gaugeIDParameter);
        }
    
        public virtual ObjectResult<FO_GetFloodOperationsNotifyReciever_Result> FO_GetFloodOperationsNotifyReciever(Nullable<long> iD, Nullable<long> eventID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            var eventIDParameter = eventID.HasValue ?
                new ObjectParameter("EventID", eventID) :
                new ObjectParameter("EventID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FO_GetFloodOperationsNotifyReciever_Result>("FO_GetFloodOperationsNotifyReciever", iDParameter, eventIDParameter);
        }
    
        public virtual ObjectResult<FO_GetFloodFightingPlanNotifyData_Result> FO_GetFloodFightingPlanNotifyData(Nullable<long> floodFightingPlanID)
        {
            var floodFightingPlanIDParameter = floodFightingPlanID.HasValue ?
                new ObjectParameter("FloodFightingPlanID", floodFightingPlanID) :
                new ObjectParameter("FloodFightingPlanID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FO_GetFloodFightingPlanNotifyData_Result>("FO_GetFloodFightingPlanNotifyData", floodFightingPlanIDParameter);
        }
    
        public virtual ObjectResult<FO_GetFloodInspectionNotifyData_Result> FO_GetFloodInspectionNotifyData(Nullable<long> floodInspectionID)
        {
            var floodInspectionIDParameter = floodInspectionID.HasValue ?
                new ObjectParameter("FloodInspectionID", floodInspectionID) :
                new ObjectParameter("FloodInspectionID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FO_GetFloodInspectionNotifyData_Result>("FO_GetFloodInspectionNotifyData", floodInspectionIDParameter);
        }
    
        public virtual ObjectResult<CM_GetComplaintsCommentsNotifyParameters_Result> CM_GetComplaintsCommentsNotifyParameters(Nullable<long> complaintID)
        {
            var complaintIDParameter = complaintID.HasValue ?
                new ObjectParameter("ComplaintID", complaintID) :
                new ObjectParameter("ComplaintID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CM_GetComplaintsCommentsNotifyParameters_Result>("CM_GetComplaintsCommentsNotifyParameters", complaintIDParameter);
        }
    
        public virtual ObjectResult<Nullable<long>> UA_GetUserManagerID(Nullable<long> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("UA_GetUserManagerID", userIDParameter);
        }
    
        public virtual ObjectResult<WT_GetBreachNotifyParameters_Result> WT_GetBreachNotifyParameters(Nullable<long> breachID)
        {
            var breachIDParameter = breachID.HasValue ?
                new ObjectParameter("BreachID", breachID) :
                new ObjectParameter("BreachID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<WT_GetBreachNotifyParameters_Result>("WT_GetBreachNotifyParameters", breachIDParameter);
        }
    
        [DbFunction("WRMIS_Entities", "WL_GetDivisionalWatertoNextDivisions")]
        public virtual IQueryable<WL_GetDivisionalWatertoNextDivisions_Result> WL_GetDivisionalWatertoNextDivisions(Nullable<long> divID, Nullable<long> channelID, Nullable<int> searchType, string fromDate, string toDate, Nullable<int> year, Nullable<int> from, Nullable<int> to)
        {
            var divIDParameter = divID.HasValue ?
                new ObjectParameter("DivID", divID) :
                new ObjectParameter("DivID", typeof(long));
    
            var channelIDParameter = channelID.HasValue ?
                new ObjectParameter("ChannelID", channelID) :
                new ObjectParameter("ChannelID", typeof(long));
    
            var searchTypeParameter = searchType.HasValue ?
                new ObjectParameter("SearchType", searchType) :
                new ObjectParameter("SearchType", typeof(int));
    
            var fromDateParameter = fromDate != null ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(string));
    
            var toDateParameter = toDate != null ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(string));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            var fromParameter = from.HasValue ?
                new ObjectParameter("From", from) :
                new ObjectParameter("From", typeof(int));
    
            var toParameter = to.HasValue ?
                new ObjectParameter("To", to) :
                new ObjectParameter("To", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<WL_GetDivisionalWatertoNextDivisions_Result>("[WRMIS_Entities].[WL_GetDivisionalWatertoNextDivisions](@DivID, @ChannelID, @SearchType, @FromDate, @ToDate, @Year, @From, @To)", divIDParameter, channelIDParameter, searchTypeParameter, fromDateParameter, toDateParameter, yearParameter, fromParameter, toParameter);
        }
    
        public virtual int SDChannelReading(Nullable<long> damID, Nullable<long> divisionID, Nullable<long> subDivisionID, Nullable<System.DateTime> readingDate)
        {
            var damIDParameter = damID.HasValue ?
                new ObjectParameter("DamID", damID) :
                new ObjectParameter("DamID", typeof(long));
    
            var divisionIDParameter = divisionID.HasValue ?
                new ObjectParameter("DivisionID", divisionID) :
                new ObjectParameter("DivisionID", typeof(long));
    
            var subDivisionIDParameter = subDivisionID.HasValue ?
                new ObjectParameter("SubDivisionID", subDivisionID) :
                new ObjectParameter("SubDivisionID", typeof(long));
    
            var readingDateParameter = readingDate.HasValue ?
                new ObjectParameter("ReadingDate", readingDate) :
                new ObjectParameter("ReadingDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SDChannelReading", damIDParameter, divisionIDParameter, subDivisionIDParameter, readingDateParameter);
        }
    
        public virtual ObjectResult<SDDamReading_Result> SDDamReading(Nullable<long> damID, Nullable<long> divisionID, Nullable<long> subDivisionID, Nullable<System.DateTime> readingDate)
        {
            var damIDParameter = damID.HasValue ?
                new ObjectParameter("DamID", damID) :
                new ObjectParameter("DamID", typeof(long));
    
            var divisionIDParameter = divisionID.HasValue ?
                new ObjectParameter("DivisionID", divisionID) :
                new ObjectParameter("DivisionID", typeof(long));
    
            var subDivisionIDParameter = subDivisionID.HasValue ?
                new ObjectParameter("SubDivisionID", subDivisionID) :
                new ObjectParameter("SubDivisionID", typeof(long));
    
            var readingDateParameter = readingDate.HasValue ?
                new ObjectParameter("ReadingDate", readingDate) :
                new ObjectParameter("ReadingDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SDDamReading_Result>("SDDamReading", damIDParameter, divisionIDParameter, subDivisionIDParameter, readingDateParameter);
        }
    
        public virtual ObjectResult<AM_GetAssetWorksNotifyReciever_Result> AM_GetAssetWorksNotifyReciever(Nullable<long> aWPID, Nullable<long> eventID)
        {
            var aWPIDParameter = aWPID.HasValue ?
                new ObjectParameter("AWPID", aWPID) :
                new ObjectParameter("AWPID", typeof(long));
    
            var eventIDParameter = eventID.HasValue ?
                new ObjectParameter("EventID", eventID) :
                new ObjectParameter("EventID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AM_GetAssetWorksNotifyReciever_Result>("AM_GetAssetWorksNotifyReciever", aWPIDParameter, eventIDParameter);
        }
    
        public virtual ObjectResult<AM_GetAWProgressNotifyData_Result> AM_GetAWProgressNotifyData(Nullable<long> progressID)
        {
            var progressIDParameter = progressID.HasValue ?
                new ObjectParameter("ProgressID", progressID) :
                new ObjectParameter("ProgressID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AM_GetAWProgressNotifyData_Result>("AM_GetAWProgressNotifyData", progressIDParameter);
        }
    
        public virtual ObjectResult<SDViewChannelReading_Result> SDViewChannelReading(Nullable<long> damID, Nullable<long> divisionID, Nullable<long> subDivisionID, Nullable<long> channelID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var damIDParameter = damID.HasValue ?
                new ObjectParameter("DamID", damID) :
                new ObjectParameter("DamID", typeof(long));
    
            var divisionIDParameter = divisionID.HasValue ?
                new ObjectParameter("DivisionID", divisionID) :
                new ObjectParameter("DivisionID", typeof(long));
    
            var subDivisionIDParameter = subDivisionID.HasValue ?
                new ObjectParameter("SubDivisionID", subDivisionID) :
                new ObjectParameter("SubDivisionID", typeof(long));
    
            var channelIDParameter = channelID.HasValue ?
                new ObjectParameter("channelID", channelID) :
                new ObjectParameter("channelID", typeof(long));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SDViewChannelReading_Result>("SDViewChannelReading", damIDParameter, divisionIDParameter, subDivisionIDParameter, channelIDParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<SDViewDamReading_Result> SDViewDamReading(Nullable<long> damID, Nullable<long> divisionID, Nullable<long> subDivisionID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var damIDParameter = damID.HasValue ?
                new ObjectParameter("DamID", damID) :
                new ObjectParameter("DamID", typeof(long));
    
            var divisionIDParameter = divisionID.HasValue ?
                new ObjectParameter("DivisionID", divisionID) :
                new ObjectParameter("DivisionID", typeof(long));
    
            var subDivisionIDParameter = subDivisionID.HasValue ?
                new ObjectParameter("SubDivisionID", subDivisionID) :
                new ObjectParameter("SubDivisionID", typeof(long));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SDViewDamReading_Result>("SDViewDamReading", damIDParameter, divisionIDParameter, subDivisionIDParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<usp_GetOutletAlterationHistory_Result> usp_GetOutletAlterationHistory(Nullable<long> channelID, Nullable<int> pageIndex, Nullable<int> pageSize)
        {
            var channelIDParameter = channelID.HasValue ?
                new ObjectParameter("ChannelID", channelID) :
                new ObjectParameter("ChannelID", typeof(long));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetOutletAlterationHistory_Result>("usp_GetOutletAlterationHistory", channelIDParameter, pageIndexParameter, pageSizeParameter);
        }
    
        public virtual ObjectResult<SP_GetParaKPKBalochistanMAFRabi_Result> SP_GetParaKPKBalochistanMAFRabi(Nullable<long> seasonID)
        {
            var seasonIDParameter = seasonID.HasValue ?
                new ObjectParameter("SeasonID", seasonID) :
                new ObjectParameter("SeasonID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetParaKPKBalochistanMAFRabi_Result>("SP_GetParaKPKBalochistanMAFRabi", seasonIDParameter);
        }
    
        public virtual ObjectResult<IsChannelClosedNow_Result> IsChannelClosedNow(Nullable<long> channelID, Nullable<System.DateTime> dateTime)
        {
            var channelIDParameter = channelID.HasValue ?
                new ObjectParameter("ChannelID", channelID) :
                new ObjectParameter("ChannelID", typeof(long));
    
            var dateTimeParameter = dateTime.HasValue ?
                new ObjectParameter("DateTime", dateTime) :
                new ObjectParameter("DateTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<IsChannelClosedNow_Result>("IsChannelClosedNow", channelIDParameter, dateTimeParameter);
        }
    
        public virtual ObjectResult<TM_GetTenderNotifyParameters_Result> TM_GetTenderNotifyParameters(Nullable<long> tenderNoticeID, Nullable<long> tenderWorkID)
        {
            var tenderNoticeIDParameter = tenderNoticeID.HasValue ?
                new ObjectParameter("TenderNoticeID", tenderNoticeID) :
                new ObjectParameter("TenderNoticeID", typeof(long));
    
            var tenderWorkIDParameter = tenderWorkID.HasValue ?
                new ObjectParameter("TenderWorkID", tenderWorkID) :
                new ObjectParameter("TenderWorkID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TM_GetTenderNotifyParameters_Result>("TM_GetTenderNotifyParameters", tenderNoticeIDParameter, tenderWorkIDParameter);
        }
    
        public virtual ObjectResult<SDChannelReading1_Result> SDChannelReading1(Nullable<long> damID, Nullable<long> divisionID, Nullable<long> subDivisionID, Nullable<System.DateTime> readingDate)
        {
            var damIDParameter = damID.HasValue ?
                new ObjectParameter("DamID", damID) :
                new ObjectParameter("DamID", typeof(long));
    
            var divisionIDParameter = divisionID.HasValue ?
                new ObjectParameter("DivisionID", divisionID) :
                new ObjectParameter("DivisionID", typeof(long));
    
            var subDivisionIDParameter = subDivisionID.HasValue ?
                new ObjectParameter("SubDivisionID", subDivisionID) :
                new ObjectParameter("SubDivisionID", typeof(long));
    
            var readingDateParameter = readingDate.HasValue ?
                new ObjectParameter("ReadingDate", readingDate) :
                new ObjectParameter("ReadingDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SDChannelReading1_Result>("SDChannelReading1", damIDParameter, divisionIDParameter, subDivisionIDParameter, readingDateParameter);
        }
    
        public virtual ObjectResult<AM_GetAWAssetAssociationNotifyData_Result> AM_GetAWAssetAssociationNotifyData(Nullable<long> aWID)
        {
            var aWIDParameter = aWID.HasValue ?
                new ObjectParameter("AWID", aWID) :
                new ObjectParameter("AWID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AM_GetAWAssetAssociationNotifyData_Result>("AM_GetAWAssetAssociationNotifyData", aWIDParameter);
        }
    
        public virtual ObjectResult<AM_GetWorkAssociationNotifyReciever_Result> AM_GetWorkAssociationNotifyReciever(Nullable<long> aWID, Nullable<long> eventID)
        {
            var aWIDParameter = aWID.HasValue ?
                new ObjectParameter("AWID", aWID) :
                new ObjectParameter("AWID", typeof(long));
    
            var eventIDParameter = eventID.HasValue ?
                new ObjectParameter("EventID", eventID) :
                new ObjectParameter("EventID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AM_GetWorkAssociationNotifyReciever_Result>("AM_GetWorkAssociationNotifyReciever", aWIDParameter, eventIDParameter);
        }
    
        public virtual int RP_InsertionPlanImplementation(Nullable<long> pRPID, Nullable<double> pUpperThreshold, Nullable<double> pLowerThreshold)
        {
            var pRPIDParameter = pRPID.HasValue ?
                new ObjectParameter("pRPID", pRPID) :
                new ObjectParameter("pRPID", typeof(long));
    
            var pUpperThresholdParameter = pUpperThreshold.HasValue ?
                new ObjectParameter("pUpperThreshold", pUpperThreshold) :
                new ObjectParameter("pUpperThreshold", typeof(double));
    
            var pLowerThresholdParameter = pLowerThreshold.HasValue ?
                new ObjectParameter("pLowerThreshold", pLowerThreshold) :
                new ObjectParameter("pLowerThreshold", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RP_InsertionPlanImplementation", pRPIDParameter, pUpperThresholdParameter, pLowerThresholdParameter);
        }
    
        public virtual int RP_InsertionPlanImplementationPercentage(Nullable<long> pRPID, Nullable<System.DateTime> pFromDate, Nullable<System.DateTime> pToDate, Nullable<double> pUpperThreshold, Nullable<double> pLowerThreshold)
        {
            var pRPIDParameter = pRPID.HasValue ?
                new ObjectParameter("pRPID", pRPID) :
                new ObjectParameter("pRPID", typeof(long));
    
            var pFromDateParameter = pFromDate.HasValue ?
                new ObjectParameter("pFromDate", pFromDate) :
                new ObjectParameter("pFromDate", typeof(System.DateTime));
    
            var pToDateParameter = pToDate.HasValue ?
                new ObjectParameter("pToDate", pToDate) :
                new ObjectParameter("pToDate", typeof(System.DateTime));
    
            var pUpperThresholdParameter = pUpperThreshold.HasValue ?
                new ObjectParameter("pUpperThreshold", pUpperThreshold) :
                new ObjectParameter("pUpperThreshold", typeof(double));
    
            var pLowerThresholdParameter = pLowerThreshold.HasValue ?
                new ObjectParameter("pLowerThreshold", pLowerThreshold) :
                new ObjectParameter("pLowerThreshold", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RP_InsertionPlanImplementationPercentage", pRPIDParameter, pFromDateParameter, pToDateParameter, pUpperThresholdParameter, pLowerThresholdParameter);
        }
    
        public virtual ObjectResult<AM_GetAWPublishNotifyData_Result1> AM_GetAWPublishNotifyData(Nullable<long> aWID)
        {
            var aWIDParameter = aWID.HasValue ?
                new ObjectParameter("AWID", aWID) :
                new ObjectParameter("AWID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AM_GetAWPublishNotifyData_Result1>("AM_GetAWPublishNotifyData", aWIDParameter);
        }
    
        public virtual ObjectResult<AC_GetAuctionsNotifyReciever_Result> AC_GetAuctionsNotifyReciever(Nullable<long> iD, Nullable<long> eventID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            var eventIDParameter = eventID.HasValue ?
                new ObjectParameter("EventID", eventID) :
                new ObjectParameter("EventID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AC_GetAuctionsNotifyReciever_Result>("AC_GetAuctionsNotifyReciever", iDParameter, eventIDParameter);
        }
    
        public virtual ObjectResult<RPT_AT_SanctionOnDropdown_Result> RPT_AT_SanctionOnDropdown(string year, string month, Nullable<int> sanctionOn)
        {
            var yearParameter = year != null ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(string));
    
            var monthParameter = month != null ?
                new ObjectParameter("Month", month) :
                new ObjectParameter("Month", typeof(string));
    
            var sanctionOnParameter = sanctionOn.HasValue ?
                new ObjectParameter("SanctionOn", sanctionOn) :
                new ObjectParameter("SanctionOn", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RPT_AT_SanctionOnDropdown_Result>("RPT_AT_SanctionOnDropdown", yearParameter, monthParameter, sanctionOnParameter);
        }
    
        public virtual ObjectResult<AC_GetApprovedCanceledNotifyData_Result> AC_GetApprovedCanceledNotifyData(Nullable<long> auctionNoticeID, Nullable<long> auctionAssetsID, Nullable<long> auctionPriceID, Nullable<long> userID)
        {
            var auctionNoticeIDParameter = auctionNoticeID.HasValue ?
                new ObjectParameter("AuctionNoticeID", auctionNoticeID) :
                new ObjectParameter("AuctionNoticeID", typeof(long));
    
            var auctionAssetsIDParameter = auctionAssetsID.HasValue ?
                new ObjectParameter("AuctionAssetsID", auctionAssetsID) :
                new ObjectParameter("AuctionAssetsID", typeof(long));
    
            var auctionPriceIDParameter = auctionPriceID.HasValue ?
                new ObjectParameter("AuctionPriceID", auctionPriceID) :
                new ObjectParameter("AuctionPriceID", typeof(long));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AC_GetApprovedCanceledNotifyData_Result>("AC_GetApprovedCanceledNotifyData", auctionNoticeIDParameter, auctionAssetsIDParameter, auctionPriceIDParameter, userIDParameter);
        }
    
        public virtual ObjectResult<AC_GetPendingApprovalNotifyData_Result> AC_GetPendingApprovalNotifyData(Nullable<long> auctionNoticeID, Nullable<long> auctionAssetsID, Nullable<long> auctionPriceID)
        {
            var auctionNoticeIDParameter = auctionNoticeID.HasValue ?
                new ObjectParameter("AuctionNoticeID", auctionNoticeID) :
                new ObjectParameter("AuctionNoticeID", typeof(long));
    
            var auctionAssetsIDParameter = auctionAssetsID.HasValue ?
                new ObjectParameter("AuctionAssetsID", auctionAssetsID) :
                new ObjectParameter("AuctionAssetsID", typeof(long));
    
            var auctionPriceIDParameter = auctionPriceID.HasValue ?
                new ObjectParameter("AuctionPriceID", auctionPriceID) :
                new ObjectParameter("AuctionPriceID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AC_GetPendingApprovalNotifyData_Result>("AC_GetPendingApprovalNotifyData", auctionNoticeIDParameter, auctionAssetsIDParameter, auctionPriceIDParameter);
        }
    
        public virtual int GetChannelAvgDPR(Nullable<long> rPID, Nullable<int> seasonID, Nullable<System.DateTime> rPStart, Nullable<System.DateTime> rPEnd)
        {
            var rPIDParameter = rPID.HasValue ?
                new ObjectParameter("RPID", rPID) :
                new ObjectParameter("RPID", typeof(long));
    
            var seasonIDParameter = seasonID.HasValue ?
                new ObjectParameter("SeasonID", seasonID) :
                new ObjectParameter("SeasonID", typeof(int));
    
            var rPStartParameter = rPStart.HasValue ?
                new ObjectParameter("RPStart", rPStart) :
                new ObjectParameter("RPStart", typeof(System.DateTime));
    
            var rPEndParameter = rPEnd.HasValue ?
                new ObjectParameter("RPEnd", rPEnd) :
                new ObjectParameter("RPEnd", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetChannelAvgDPR", rPIDParameter, seasonIDParameter, rPStartParameter, rPEndParameter);
        }
    
        public virtual ObjectResult<RP_GetAvgDPRChannelName_Result> RP_GetAvgDPRChannelName(Nullable<long> rPID)
        {
            var rPIDParameter = rPID.HasValue ?
                new ObjectParameter("RPID", rPID) :
                new ObjectParameter("RPID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RP_GetAvgDPRChannelName_Result>("RP_GetAvgDPRChannelName", rPIDParameter);
        }
    
        public virtual ObjectResult<Nullable<double>> RP_GetAvgDPRDifference(Nullable<long> rPID)
        {
            var rPIDParameter = rPID.HasValue ?
                new ObjectParameter("RPID", rPID) :
                new ObjectParameter("RPID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<double>>("RP_GetAvgDPRDifference", rPIDParameter);
        }
    
        public virtual ObjectResult<RP_GetBandFrequency_Result> RP_GetBandFrequency(Nullable<long> rPID)
        {
            var rPIDParameter = rPID.HasValue ?
                new ObjectParameter("RPID", rPID) :
                new ObjectParameter("RPID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RP_GetBandFrequency_Result>("RP_GetBandFrequency", rPIDParameter);
        }
    
        public virtual ObjectResult<AT_GetBudgetUtilizationList_Result> AT_GetBudgetUtilizationList(string financialYear, string month, Nullable<long> objectClassificationID)
        {
            var financialYearParameter = financialYear != null ?
                new ObjectParameter("FinancialYear", financialYear) :
                new ObjectParameter("FinancialYear", typeof(string));
    
            var monthParameter = month != null ?
                new ObjectParameter("Month", month) :
                new ObjectParameter("Month", typeof(string));
    
            var objectClassificationIDParameter = objectClassificationID.HasValue ?
                new ObjectParameter("ObjectClassificationID", objectClassificationID) :
                new ObjectParameter("ObjectClassificationID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AT_GetBudgetUtilizationList_Result>("AT_GetBudgetUtilizationList", financialYearParameter, monthParameter, objectClassificationIDParameter);
        }
    
        public virtual int RP_GetChannelAvgDPR(Nullable<long> rPID, Nullable<int> seasonID, Nullable<System.DateTime> rPStart, Nullable<System.DateTime> rPEnd)
        {
            var rPIDParameter = rPID.HasValue ?
                new ObjectParameter("RPID", rPID) :
                new ObjectParameter("RPID", typeof(long));
    
            var seasonIDParameter = seasonID.HasValue ?
                new ObjectParameter("SeasonID", seasonID) :
                new ObjectParameter("SeasonID", typeof(int));
    
            var rPStartParameter = rPStart.HasValue ?
                new ObjectParameter("RPStart", rPStart) :
                new ObjectParameter("RPStart", typeof(System.DateTime));
    
            var rPEndParameter = rPEnd.HasValue ?
                new ObjectParameter("RPEnd", rPEnd) :
                new ObjectParameter("RPEnd", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RP_GetChannelAvgDPR", rPIDParameter, seasonIDParameter, rPStartParameter, rPEndParameter);
        }
    
        public virtual ObjectResult<usp_GetDailyGaugeData_Result> usp_GetDailyGaugeData(Nullable<long> zoneID, Nullable<long> cirlceID, Nullable<long> divisionID, Nullable<long> subDivisionID, string channelName, Nullable<System.DateTime> date, Nullable<int> session, Nullable<int> pageIndex, Nullable<int> pageSize)
        {
            var zoneIDParameter = zoneID.HasValue ?
                new ObjectParameter("ZoneID", zoneID) :
                new ObjectParameter("ZoneID", typeof(long));
    
            var cirlceIDParameter = cirlceID.HasValue ?
                new ObjectParameter("CirlceID", cirlceID) :
                new ObjectParameter("CirlceID", typeof(long));
    
            var divisionIDParameter = divisionID.HasValue ?
                new ObjectParameter("DivisionID", divisionID) :
                new ObjectParameter("DivisionID", typeof(long));
    
            var subDivisionIDParameter = subDivisionID.HasValue ?
                new ObjectParameter("SubDivisionID", subDivisionID) :
                new ObjectParameter("SubDivisionID", typeof(long));
    
            var channelNameParameter = channelName != null ?
                new ObjectParameter("ChannelName", channelName) :
                new ObjectParameter("ChannelName", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var sessionParameter = session.HasValue ?
                new ObjectParameter("Session", session) :
                new ObjectParameter("Session", typeof(int));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetDailyGaugeData_Result>("usp_GetDailyGaugeData", zoneIDParameter, cirlceIDParameter, divisionIDParameter, subDivisionIDParameter, channelNameParameter, dateParameter, sessionParameter, pageIndexParameter, pageSizeParameter);
        }
    
        public virtual ObjectResult<SI_GetDischargeTableCalcBL_Result> SI_GetDischargeTableCalcBL(Nullable<long> iD, Nullable<long> eventID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            var eventIDParameter = eventID.HasValue ?
                new ObjectParameter("EventID", eventID) :
                new ObjectParameter("EventID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SI_GetDischargeTableCalcBL_Result>("SI_GetDischargeTableCalcBL", iDParameter, eventIDParameter);
        }
    
        public virtual ObjectResult<SI_GetDischargeTableCalcBLNotifyData_Result> SI_GetDischargeTableCalcBLNotifyData(Nullable<long> scheduleDetailID)
        {
            var scheduleDetailIDParameter = scheduleDetailID.HasValue ?
                new ObjectParameter("ScheduleDetailID", scheduleDetailID) :
                new ObjectParameter("ScheduleDetailID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SI_GetDischargeTableCalcBLNotifyData_Result>("SI_GetDischargeTableCalcBLNotifyData", scheduleDetailIDParameter);
        }
    
        public virtual ObjectResult<SI_GetDischargeTableCalcBLOrCLNotifyReciever_Result> SI_GetDischargeTableCalcBLOrCLNotifyReciever(Nullable<long> iD, Nullable<long> eventID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            var eventIDParameter = eventID.HasValue ?
                new ObjectParameter("EventID", eventID) :
                new ObjectParameter("EventID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SI_GetDischargeTableCalcBLOrCLNotifyReciever_Result>("SI_GetDischargeTableCalcBLOrCLNotifyReciever", iDParameter, eventIDParameter);
        }
    
        public virtual ObjectResult<SI_GetDischargeTableCalcBLNotifyDataAndroid_Result> SI_GetDischargeTableCalcBLNotifyDataAndroid(Nullable<long> gaugeID, string calcType)
        {
            var gaugeIDParameter = gaugeID.HasValue ?
                new ObjectParameter("GaugeID", gaugeID) :
                new ObjectParameter("GaugeID", typeof(long));
    
            var calcTypeParameter = calcType != null ?
                new ObjectParameter("CalcType", calcType) :
                new ObjectParameter("CalcType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SI_GetDischargeTableCalcBLNotifyDataAndroid_Result>("SI_GetDischargeTableCalcBLNotifyDataAndroid", gaugeIDParameter, calcTypeParameter);
        }
    
        public virtual ObjectResult<SI_GetDischargeTableCalcBLOrCLNotifyRecieverAndroid_Result> SI_GetDischargeTableCalcBLOrCLNotifyRecieverAndroid(Nullable<long> iD, Nullable<long> eventID, string calcType)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            var eventIDParameter = eventID.HasValue ?
                new ObjectParameter("EventID", eventID) :
                new ObjectParameter("EventID", typeof(long));
    
            var calcTypeParameter = calcType != null ?
                new ObjectParameter("CalcType", calcType) :
                new ObjectParameter("CalcType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SI_GetDischargeTableCalcBLOrCLNotifyRecieverAndroid_Result>("SI_GetDischargeTableCalcBLOrCLNotifyRecieverAndroid", iDParameter, eventIDParameter, calcTypeParameter);
        }
    
        public virtual ObjectResult<SI_GetUserInspectionsByDate_Result> SI_GetUserInspectionsByDate(Nullable<long> userID, Nullable<System.DateTime> date)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(long));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SI_GetUserInspectionsByDate_Result>("SI_GetUserInspectionsByDate", userIDParameter, dateParameter);
        }
    
        public virtual ObjectResult<GetChannelSectionOutlet_Result> GetChannelSectionOutlet(Nullable<long> pUserID)
        {
            var pUserIDParameter = pUserID.HasValue ?
                new ObjectParameter("pUserID", pUserID) :
                new ObjectParameter("pUserID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetChannelSectionOutlet_Result>("GetChannelSectionOutlet", pUserIDParameter);
        }
    }
}
